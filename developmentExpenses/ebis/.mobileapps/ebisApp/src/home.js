/*
 * JS for home generated by Appery.io
 *
 * Created on: Friday, September 06, 2013, 09:58:03 AM (PDT)
 */

Appery.getProjectGUID = function() {
    return 'a77c4895-c973-4636-a787-d44fb88f624b';
}

function navigateTo(outcome, useAjax) {
    Appery.navigateTo(outcome, useAjax);
}

function adjustContentHeight() {
    Appery.adjustContentHeight();
}

function adjustContentHeightWithPadding() {
    Appery.adjustContentHeightWithPadding();
}

function setDetailContent(pageUrl) {
    Appery.setDetailContent(pageUrl);
}

Appery.AppPages = [{
    "name": "ebisCameraExpense",
    "location": "#ebisCameraExpense"
}, {
    "name": "aboutus",
    "location": "#aboutus"
}, {
    "name": "settings_account",
    "location": "#settings_account"
}, {
    "name": "milesoption",
    "location": "#milesoption"
}, {
    "name": "settings_UserID",
    "location": "#settings_UserID"
}, {
    "name": "settings_Network",
    "location": "#settings_Network"
}, {
    "name": "UITestBed",
    "location": "#UITestBed"
}, {
    "name": "settings",
    "location": "#settings"
}, {
    "name": "favourites",
    "location": "#favourites"
}, {
    "name": "ebisMileageExpense",
    "location": "#ebisMileageExpense"
}, {
    "name": "home",
    "location": "#home"
}, {
    "name": "mobilescreen",
    "location": "#mobilescreen"
}, {
    "name": "addClaimGroup",
    "location": "#addClaimGroup"
}, {
    "name": "feedback",
    "location": "#feedback"
}, {
    "name": "settings_CacheLifetime",
    "location": "#settings_CacheLifetime"
}, {
    "name": "settings_ConnectionServer",
    "location": "#settings_ConnectionServer"
}, {
    "name": "optionstemplate1",
    "location": "#optionstemplate1"
}, {
    "name": "settings_Sync",
    "location": "#settings_Sync"
}, {
    "name": "OACameraExpense",
    "location": "#OACameraExpense"
}, {
    "name": "abs",
    "location": "#abs"
}];

home_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'buttoneBIS': 'home_buttoneBIS',
        'mobilebuttonAdd': 'home_mobilebuttonAdd',
        'mobileselectmenu_claims': 'home_mobileselectmenu_claims',
        'mobileselectmenuitem_219': 'home_mobileselectmenuitem_219',
        'mobilegrid_128': 'home_mobilegrid_128',
        'mobilegridcell_129': 'home_mobilegridcell_129',
        'myList': 'home_myList',
        'expenseList': 'home_expenseList',
        'mobilelistitembtn1_109': 'home_mobilelistitembtn1_109',
        'myGrid': 'home_myGrid',
        'mobilegridcell_115': 'home_mobilegridcell_115',
        'mobilelabel1_Date': 'home_mobilelabel1_Date',
        'mobilelabel1_Type': 'home_mobilelabel1_Type',
        'mobilegridcell_116': 'home_mobilegridcell_116',
        'mobilelabel1_Reason': 'home_mobilelabel1_Reason',
        'mobilelabel1_Amount': 'home_mobilelabel1_Amount',
        'mobilelabel_expenseStatus': 'home_mobilelabel_expenseStatus',
        'mobilegridcell_202': 'home_mobilegridcell_202',
        'mobileimage_304': 'home_mobileimage_304',
        'mobilegridcell_220': 'home_mobilegridcell_220',
        'mobileimage_Image': 'home_mobileimage_Image',
        'mobilegridcell_117': 'home_mobilegridcell_117',
        'mobilelabel_group': 'home_mobilelabel_group',
        'mobilegridcell_118': 'home_mobilegridcell_118',
        'mobilelabel1_TagID': 'home_mobilelabel1_TagID',
        'mobilegridcell_203': 'home_mobilegridcell_203',
        'mobilegridcell_221': 'home_mobilegridcell_221',
        'inbox': 'home_inbox',
        'mobilelistitembutton_313': 'home_mobilelistitembutton_313',
        'mobilegrid_51': 'home_mobilegrid_51',
        'mobilegridcell_52': 'home_mobilegridcell_52',
        'mobilegroupedbuttons1_38': 'home_mobilegroupedbuttons1_38',
        'mobileDelete': 'home_mobileDelete',
        'mobileUpload': 'home_mobileUpload',
        'MobileFetch': 'home_MobileFetch',
        'mobileAddExpense': 'home_mobileAddExpense',
        'mobileCancel_1': 'home_mobileCancel_1',
        'mobilebuttonsCamera': 'home_mobilebuttonsCamera',
        'mobilebuttonTake': 'home_mobilebuttonTake',
        'mobilebuttonLibrary': 'home_mobilebuttonLibrary',
        'mobilebuttonMiles': 'home_mobilebuttonMiles',
        'mobilebuttonFav': 'home_mobilebuttonFav',
        'mobileCancel': 'home_mobileCancel',
        'buttonCamera': 'home_buttonCamera',
        'mobilegrid_294': 'home_mobilegrid_294',
        'mobilegridcell_295': 'home_mobilegridcell_295',
        'mobilegridcell_296': 'home_mobilegridcell_296',
        'mobilelist_249': 'home_mobilelist_249',
        'mobilelistitem_250': 'home_mobilelistitem_250',
        'mobilelistitembutton_251': 'home_mobilelistitembutton_251',
        'mobilelistitem_252': 'home_mobilelistitem_252',
        'mobilelistitembutton_255': 'home_mobilelistitembutton_255',
        'mobilegrid_321': 'home_mobilegrid_321',
        'mobilegridcell_322': 'home_mobilegridcell_322',
        'mobileimageSendeBIS': 'home_mobileimageSendeBIS',
        'mobilegridcell_323': 'home_mobilegridcell_323',
        'mobilelabel_301': 'home_mobilelabel_301',
        'mobilelistitem_254': 'home_mobilelistitem_254',
        'mobilelistitembutton_257': 'home_mobilelistitembutton_257',
        'mobilegrid_316': 'home_mobilegrid_316',
        'mobilegridcell_317': 'home_mobilegridcell_317',
        'mobileimage_288': 'home_mobileimage_288',
        'mobilegridcell_318': 'home_mobilegridcell_318',
        'mobilelabel_282': 'home_mobilelabel_282',
        'mobilelistitem_256': 'home_mobilelistitem_256',
        'mobilegrid_268': 'home_mobilegrid_268',
        'mobilegridcell_269': 'home_mobilegridcell_269',
        'mobileimage_283': 'home_mobileimage_283',
        'mobilegridcell_270': 'home_mobilegridcell_270',
        'mobilelabel_326': 'home_mobilelabel_326',
        'mobilelistitembutton_287': 'home_mobilelistitembutton_287',
        'mobilelistitem_286': 'home_mobilelistitem_286',
        'mobilegrid_289': 'home_mobilegrid_289',
        'mobilegridcell_290': 'home_mobilegridcell_290',
        'mobileimage_284': 'home_mobileimage_284',
        'mobilegridcell_291': 'home_mobilegridcell_291',
        'mobilelabel_246': 'home_mobilelabel_246',
        'mobilelistitembutton_293': 'home_mobilelistitembutton_293',
        'mobilelistitem_292': 'home_mobilelistitem_292',
        'mobilelistitembutton_315': 'home_mobilelistitembutton_315',
        'mobilegrid_327': 'home_mobilegrid_327',
        'mobilegridcell_328': 'home_mobilegridcell_328',
        'mobileimage_285': 'home_mobileimage_285',
        'mobilegridcell_329': 'home_mobilegridcell_329',
        'mobilelabel_248': 'home_mobilelabel_248',
        'mobilelistitem_332': 'home_mobilelistitem_332',
        'mobilelistitembutton_333': 'home_mobilelistitembutton_333',
        'mobilegrid_334': 'home_mobilegrid_334',
        'mobilegridcell_335': 'home_mobilegridcell_335',
        'mobileimage_339': 'home_mobileimage_339',
        'mobilebutton_302': 'home_mobilebutton_302',
        'mobilebutton_303': 'home_mobilebutton_303'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'home';

    /*
     * Nonvisual components
     */
    var datasources = [];

    mobilecameraTakePicture = new Appery.DataSource(CameraService, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("home");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['imageURI'],
            'ID': '___local_storage___',
            'ATTR': 'url'
        }],
        'requestMapping': [{
            'PATH': ['quality'],
            'ATTR': '80'
        }, {
            'PATH': ['destinationType'],
            'ATTR': 'Data URL'
        }, {
            'PATH': ['sourcetype'],
            'ATTR': 'Camera'
        }, {
            'PATH': ['allowedit'],
            'ATTR': 'true'
        }, {
            'PATH': ['encodingType'],
            'ATTR': 'JPEG'
        }, {
            'PATH': ['targetWidth'],
            'ATTR': '1024'
        }, {
            'PATH': ['targetHeight'],
            'ATTR': '768'
        }]
    });

    datasources.push(mobilecameraTakePicture);

    mobilecameraUseLibrary = new Appery.DataSource(CameraService, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("home");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': [{
            'PATH': ['quality'],
            'ATTR': '80'
        }, {
            'PATH': ['destinationType'],
            'ATTR': 'Data URL'
        }, {
            'PATH': ['sourcetype'],
            'ATTR': 'Camera',
            'TRANSFORMATION': function(value) {
                return "Photolibrary"
            }
        }, {
            'PATH': ['allowedit'],
            'ATTR': 'true'
        }, {
            'PATH': ['encodingType'],
            'ATTR': 'JPEG'
        }, {
            'PATH': ['targetWidth'],
            'ATTR': '1024'
        }, {
            'PATH': ['targetHeight'],
            'ATTR': '768'
        }]
    });

    datasources.push(mobilecameraUseLibrary);

    ebisCaptureExpense = new Appery.DataSource(ebisService_eBISdata_CaptureExpense, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("home");
        },
        'onSuccess': function(data) { //gridDeleteRow("1");
            Tiggzi('mobilegroupedbuttons1_38').hide();
            toastDelay = 3000; //message show time
            toast('Connected - Claims uploaded'); /* on success need to change expenseform data to say expense status sent */
            console.log('Parsing expense data to change unsent to sent');
            var theid = "Unsent";
            var expenseForm = localStorage.getItem("expenseRaw");
            if (!expenseForm) {
                expenseForm = [];
            } else {
                expenseForm = JSON.parse(expenseForm);
            }
            var parsedFields = JSON.parse(localStorage.getItem("expenseForm"));
            var JSONFields = JSON.stringify(parsedFields.expenseForm);
            var parsed = JSON.parse(JSONFields);

            for (var i = 0; i < parsed.length; ++i)
            if (theid == parsed[i].expenseStatus) {
                var item = {
                    "expenseIndex": "Sent" + parsed[i].expenseDate,
                    "expenseGroup": parsed[i].expenseGroup,
                    "expenseDate": parsed[i].expenseDate,
                    "expenseType": parsed[i].expenseType,
                    "expenseReason": parsed[i].expenseReason,
                    "expenseAmount": parsed[i].expenseAmount,
                    "expenseNotes": parsed[i].expenseNotes,
                    "expenseMilesClaim": parsed[i].expenseMilesClaim,
                    "expenseMilesRate": parsed[i].expenseMilesRate,
                    "expenseFrom": parsed[i].expenseFrom,
                    "expenseTo": parsed[i].expenseTo,
                    "expenseImage": parsed[i].expenseImage,
                    "expense_ID": parsed[i].expense_ID,
                    "expenseStatus": "Sent",
                    "expenseCharge": parsed[i].expenseCharge,
                    "expensePurpose": parsed[i].expensePurpose,
                    "expenseOOP": parsed[i].expenseOOP,
                    "expensePayee": parsed[i].expensePayee,
                    "expenseNoPeople": parsed[i].expenseNoPeople,
                    "expenseNoNights": parsed[i].expenseNoNights,
                    "expenseEveMeal": parsed[i].expenseEveMeal,
                    "expenseBreak": parsed[i].expenseBreak,
                    "expenseLunch": parsed[i].expenseLunch,
                    "expenseVisit": parsed[i].expenseVisit,
                    "expenseRound": parsed[i].expenseRound,
                    "expenseVehicle": parsed[i].expenseVehicle,
                    "expenseYTDMiles": parsed[i].expenseYTDMiles,
                    "expensePeople": parsed[i].expensePeople
                };
                expenseForm.splice(i, 1, item);
                console.log('Found unsent data changing to sent.');
            }
            sortJSON(expenseForm, 'expenseIndex', '321'); // 123 or 321
            myJSON = JSON.stringify({
                expenseForm: expenseForm
            });
            localStorage.setItem("expenseForm", myJSON);
            localStorage.setItem("expenseRaw", JSON.stringify(expenseForm));
            try {
                ExpenseJSONRead.execute({});
            } catch (ex) {
                console.log(ex.name + '  ' + ex.message);
                hideSpinner();
            };
            localStorage.setItem('SendCounter', 0);
            showMenuCounters();
            $('.SpinnerAdd').remove();
            $('.Backdrop').remove();
        },
        'onError': function(jqXHR, textStatus, errorThrown) {
            $('.SpinnerAdd').remove();
            $('.Backdrop').remove();
            Tiggzi('mobilegroupedbuttons1_38').hide();
            toastDelay = 5000; //message show time
            toast('Connection timeout, please try again later');;
        },
        'responseMapping': [],
        'requestMapping': [{
            'PATH': ['pcMobileData'],
            'TRANSFORMATION': function(value) {
                //set to ExpenseForm
                //return localStorage.getItem('expenseForm');
                var sendForm = [];
                var parsedFields = JSON.parse(localStorage.getItem("expenseForm"));
                var JSONFields = JSON.stringify(parsedFields.expenseForm);
                var parsed = JSON.parse(JSONFields);

                for (var i = parsed.length - 1; i >= 0; i--) {
                    if ("Unsent" == parsed[i].expenseStatus) {
                        var item = {
                            "expenseIndex": parsed[i].expenseIndex,
                            "expenseGroup": parsed[i].expenseGroup,
                            "expenseDate": parsed[i].expenseDate,
                            "expenseType": parsed[i].expenseType,
                            "expenseReason": parsed[i].expenseReason,
                            "expenseAmount": parsed[i].expenseAmount,
                            "expenseNotes": parsed[i].expenseNotes,
                            "expenseMilesClaim": parsed[i].expenseMilesClaim,
                            "expenseMilesRate": parsed[i].expenseMilesRate,
                            "expenseFrom": parsed[i].expenseFrom,
                            "expenseTo": parsed[i].expenseTo,
                            "expenseImage": parsed[i].expenseImage,
                            "expense_ID": parsed[i].expense_ID,
                            "expenseStatus": parsed[i].expenseStatus,
                            "expenseCharge": parsed[i].expenseCharge,
                            "expensePurpose": parsed[i].expensePurpose,
                            "expenseOOP": parsed[i].expenseOOP,
                            "expensePayee": parsed[i].expensePayee,
                            "expenseNoPeople": parsed[i].expenseNoPeople,
                            "expenseNoNights": parsed[i].expenseNoNights,
                            "expenseEveMeal": parsed[i].expenseEveMeal,
                            "expenseBreak": parsed[i].expenseBreak,
                            "expenseLunch": parsed[i].expenseLunch,
                            "expenseVisit": parsed[i].expenseVisit,
                            "expenseRound": parsed[i].expenseRound,
                            "expenseVehicle": parsed[i].expenseVehicle,
                            "expenseYTDMiles": parsed[i].expenseYTDMiles,
                            "expensePeople": parsed[i].expensePeople
                        };
                        sendForm.push(item);
                    }
                }
                return JSON.stringify({
                    expenseForm: sendForm
                });
            }
        }]
    });

    datasources.push(ebisCaptureExpense);

    ebisInitObject = new Appery.DataSource(ebisService_eBISdata_JSDO, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("home");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(ebisInitObject);

    ExpenseJSONRead = new Appery.DataSource(ExpenseJSON_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("home");
        },
        'onSuccess': function(data) {
            var expenseAmount = [];
            var parsedFields = JSON.parse(localStorage.getItem("expenseForm"));
            var JSONFields = JSON.stringify(parsedFields.expenseForm);
            var parsed = JSON.parse(JSONFields);
            var Amount = 0;
            for (var i = 0; i < parsed.length; ++i)
            if (parsed[i].expenseStatus == "Unsent") {
                Amount = parseFloat(Amount) + parseFloat(parsed[i].expenseAmount);

            };
            var ClaimAmount = Amount.toFixed(2);
            $('#home_inbox span').text(ClaimAmount);

            ;
        },
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['expenseForm'],
            'ID': 'expenseList',
            'SET': [{
                'PATH': ['expenseDate'],
                'ID': 'mobilelabel1_Date',
                'ATTR': '@'
            }, {
                'PATH': ['expenseType'],
                'ID': 'mobilelabel1_Type',
                'ATTR': '@'
            }, {
                'PATH': ['expenseReason'],
                'ID': 'mobilelabel1_Reason',
                'ATTR': '@'
            }, {
                'PATH': ['expenseAmount'],
                'ID': 'mobilelabel1_Amount',
                'ATTR': '@',
                'TRANSFORMATION': function(value, element) {
                    var jobsdo = Tiggzi('myGrid').parent(); //get Div of Jobs Pic
                    $('#oop').remove(); //Remove any existing Jobs counter style first
                    var StyleTask = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'white',
                        'text-shadow': '10px 10px 1px #000',
                        'font-weight': 'bold',
                        'font-size': '100%',
                        'margin-left': '15px',
                        'margin-top': '-15px'
                    };
                    var StyleJob = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'font-size': '14px',
                        'font-weight': 'bold',
                        'margin-top': '-50px',
                        '-moz-transform': 'rotate(-10deg)',
                        '-webkit-transform': 'rotate(-10deg)'
                    };
                    //if (value > 25 ) { $('<p id="oop">').appendTo(jobsdo).text("Out of Policy !").css(StyleJob)}; 

                }
            }, {
                'PATH': ['expense_ID'],
                'ID': 'mobilelabel1_TagID',
                'ATTR': '@'
            }, {
                'PATH': ['expenseImage'],
                'ID': 'mobileimage_Image',
                'ATTR': 'src'
            }, {
                'PATH': ['expenseGroup'],
                'ID': 'mobilelabel_group',
                'ATTR': '@'
            }, {
                'PATH': ['expenseStatus'],
                'ID': 'mobilelabel_expenseStatus',
                'ATTR': '@',
                'TRANSFORMATION': function(value, element) {
                    if (value == 'Sent') {
                        element.parents("li").css("background", "#d3d3d3");
                    } else {
                        element.parents("li").css("background", "white");
                        element.parents("tr").addClass('bold-list');

                    }
                }
            }, {
                'PATH': ['expenseStatus'],
                'ID': 'mobilelabel_expenseStatus',
                'ATTR': 'visible'
            }, {
                'PATH': ['expenseStatus'],
                'ID': 'mobileimage_304',
                'ATTR': 'visible',
                'TRANSFORMATION': function(value, element) {
                    if (value == 'Sent') {

                        element.show();
                    } else {
                        element.hide();

                    }
                }
            }]
        }],
        'requestMapping': []
    });

    datasources.push(ExpenseJSONRead);

    /*
     * Events and handlers
     */

    // Before Show
    home_beforeshow = function() {
        Appery.CurrentScreen = "home";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_12CF_onLoad = home_onLoad = function() {
        screen_12CF_elementsExtraJS();
        showSpinner({
            text: 'Loading...',
            textVisible: true,
            theme: 'b'
        });

        Tiggzi('mobilecontainer1').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer1').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer1').css('background-size', 'cover');
        Tiggzi('mobilecontainer1').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer1').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer1').css('-o-background-size', 'cover');

        // facebook style slide panel
        var panel = $(".side_panel").detach();
        panel.attr({
            "data-role": "panel",
            "data-position": "left",
            "data-display": "push",
            "data-theme": "F",
            "id": "myCoolestNavPanel"
        });
        panel.prependTo('div[data-role="page"]');
        panel.parent().trigger("create");

        // attach events to the panel 
        // send to ebis
        Appery('mobilelistitem_252').bind('click', function(evt) {

            toastDelay = 1000; //message show time
            toast("Establishing Connection");
            var screen = "home"; //Apply to this screen by name
            var text = "LOADING"; //any text here
            spinnerFull(screen, text); //this runs the function;
            ebisConnection();
            $(".side_panel").panel("close");
        });

        //about us
        Appery('mobilelistitem_286').bind('click', function(evt) {
            Tiggr.navigateTo('settings', {
                transition: 'pop',
                reverse: false
            });
        });
        // account settings
        Appery('mobilelistitem_256').bind('click', function(evt) {
            Tiggr.navigateTo('favourites', {
                transition: 'pop',
                reverse: false
            });
        });
        // about us
        Appery('mobilelistitem_292').bind('click', function(evt) {
            Tiggr.navigateTo('aboutus', {
                transition: 'pop',
                reverse: false
            });
        });
        // about us
        Appery('mobilelistitem_332').bind('click', function(evt) {
            Tiggr.navigateTo('aboutus', {
                transition: 'pop',
                reverse: false
            });
        });

        // delete all
        Appery('mobilelistitem_254').bind('click', function(evt) {
            deleteUnsent();
            try {
                ExpenseJSONRead.execute({});
            } catch (ex) {
                console.log(ex.name + '  ' + ex.message);
                hideSpinner();
            };
            $(".side_panel").panel("close");
        });

        Tiggzi('buttonAdd').css('background-image', 'url("' + Tiggzi.getImagePath('money_add.png') + '")');
        Tiggzi('buttonAdd').css('background-repeat', 'no-repeat');
        Tiggzi('buttonCamera').css('background-image', 'url("' + Tiggzi.getImagePath('camera.png') + '")');
        Tiggzi('buttonCamera').css('background-repeat', 'no-repeat');
        Tiggzi('buttoneBIS').css('background', 'transparent');
        Tiggzi('buttoneBIS').css('background-image', 'url("' + Tiggzi.getImagePath('omdesktop_icon57x57.png') + '")');
        Tiggzi('buttoneBIS').css('background-repeat', 'no-repeat !important');
        Tiggzi('buttoneBIS').css('background-size', 'cover');
        localStorage.setItem("expenseFilter", "All");

        ;
        localStorage.setItem('expenseModify', '[]');

        // TODO fire device events only if necessary (with JS logic)
        home_deviceEvents();
        home_windowEvents();
        screen_12CF_elementsEvents();
    }

    // screen window events
    screen_12CF_windowEvents = home_windowEvents = function() {
        $('#home').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#home').bind({
            pageshow: function() {
                try {
                    ExpenseJSONRead.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
                toastDelay = 3000; //message show time
                var ResultData = localStorage.getItem("ResultGroups");
                if (!ResultData) {
                    toastDelay = 5000; //message show time
                    toast('Data Sync Required - Account Settings > Synchronize Data');
                    Tiggzi('buttoneBIS').addClass('animated wobble');
                } else {
                    Tiggzi('buttoneBIS').removeClass('animated wobble');
                }
                var expenseForm = localStorage.getItem("expenseRaw");
                if (!expenseForm) {
                    toast('No Expenses Found');
                }
                var ResultData = localStorage.getItem("ResultGroups");
                if (!ResultData) {
                    Tiggzi('mobilebuttonAdd').attr('disabled', 'disabled');
                    $("[name=mobilebuttonAdd]").css('color', '#DADADA');
                } else {
                    Tiggzi('mobilebuttonAdd').attr('disabled', null);
                    $("[name=mobilebuttonAdd]").css('color', '#000000');
                }

                ;
                showMenuCounters();
                localStorage.setItem("morePhoto", ""); // used in helping to pick if its a photo/remove option from the grid -> more.;
            },
        });

    }

    // device events
    home_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_12CF_elementsExtraJS = home_elementsExtraJS = function() {
        // screen (home) extra code

        /* mobileselectmenu_claims */

        $("#home_mobileselectmenu_claims").parent().find("a.ui-btn").attr("tabindex", "16");

        /* myList */

        listView = $("#home_myList");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#home_myList .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* expenseList */

        /* inbox */

        /* mobilelist_249 */

        listView = $("#home_mobilelist_249");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#home_mobilelist_249 .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* mobilelistitem_250 */

        /* mobilelistitem_252 */

        /* mobilelistitem_254 */

        /* mobilelistitem_256 */

        /* mobilelistitem_286 */

        /* mobilelistitem_292 */

        /* mobilelistitem_332 */

    }

    // screen elements handler
    screen_12CF_elementsEvents = home_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#home_mobileheader1 [name="buttoneBIS"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('buttoneBIS').removeClass('animated wobble');
                    $(".side_panel").panel("open");;

                }
            },
        });
        $('#home_mobileheader1 [name="mobilebuttonAdd"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    localStorage.setItem('lv_tagId', '');
                    localStorage.setItem('lv_favtagId', '');
                    //Tiggzi('mobilebuttonsCamera').show();
                    Appery.navigateTo('addClaimGroup', {
                        transition: 'pop',
                        reverse: false
                    });

                }
            },
        });

        $('#home_mobilecontainer1 [name="mobileselectmenu_claims"]').die().live({
            change: function() {
                setVar_('expenseFilter', 'home_mobileselectmenu_claims', 'value', '', this);
                $('h1').first().text((Tiggzi("mobileselectmenu_claims").val() + " Claims"));
                Tiggzi("mobilelistitem_308").val() + " Claims";
                try {
                    ExpenseJSONRead.execute({});
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };;
            },
        });

        $('#home_mobilecontainer1 [name="expenseList"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('lv_tagId', 'home_mobilelabel1_TagID', 'text', '', this);
                    setVar_('lv_checkExpenseType', 'home_mobilelabel1_Type', 'text', '', this);
                    localStorage.setItem('lv_favtagId', '');
                    setVar_('sessionGroup', 'home_mobilelabel_group', 'text', '', this);

                }
            },
            swipeleft: function() {
                setVar_('lv_tagId', 'home_mobilelabel1_TagID', 'text', '', this);
                setVar_('lv_checkExpenseType', 'home_mobilelabel1_Type', 'text', '', this);
                localStorage.setItem('lv_favtagId', '');
                setVar_('sessionGroup', 'home_mobilelabel_group', 'text', '', this);
                // reference the just swiped list item
                var $li = $(this);

                // remove all buttons first
                $('.aDeleteBtn').remove();
                $('.aMoreBtn').remove();
                // create buttons and div container
                var $aDeleteBtn = $('<a>Delete</a>').attr({
                    'data-role': 'button',
                    'data-mini': true,
                    'data-inline': 'true',
                    'class': 'aDeleteBtn ui-btn-up-r',
                    'href': $li.data('swipeurl')
                });
                var $aMoreBtn = $('<a>More</a>').attr({
                    'data-role': 'button',
                    'data-mini': true,
                    'data-inline': 'true',
                    'class': 'aMoreBtn ui-btn-up-grey',
                    'href': $li.data('swipeurl')
                });

                // insert swipe div into list item
                //$li.prepend($aDeleteBtn);
                //$li.fadeOut(150, function() {$li.prepend($aDeleteBtn); }); 
                //$li.fadeOut(150, function() {$aDeleteBtn.prependTo($li).button()}); 
                //$li.fadeIn(150); 
                $aMoreBtn.prependTo($li).button();
                $aDeleteBtn.prependTo($li).button();

                $li.find('.ui-btn').hide().animate({
                    width: 'toggle'
                }, 250);
                // override row click
                $li.bind('tap', function(e) {
                    // if the triggering object is a button, fire it's tap event
                    if (e.target.className.indexOf('aDeleteBtn') >= 0) $(e.target).trigger('tap');
                    if (e.target.className.indexOf('aMoreBtn') >= 0) $(e.target).trigger('tap');
                    e.gesture.stopDetect();
                    // remove any existing cancel buttons
                    $('.aDeleteBtn').remove();
                    $('.aMoreBtn').remove();
                    // remove the event
                });

                $('.aDeleteBtn').tap(function(e) {
                    $li.remove();
                    onswipe = false;
                    $("ul[id='swipedelete']").listview("refresh");
                    gridClaimDelete();

                    try {
                        ExpenseJSONRead.execute({});
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    }

                });

                $('.aMoreBtn').tap(function(e) {
                    onswipe = false;

                    navigator.notification.confirm("", onMore, "Claim Options", "Take Photo,Use Camera Library,Remove Photo,Copy Claim,CANCEL");

                    function onMore(buttonIndex) {
                        if (buttonIndex === 1) {
                            localStorage.setItem("morePhoto", "Camera");
                            Tiggr.navigateTo('OACameraExpense', {
                                transition: 'slide',
                                reverse: false
                            });
                        }
                        if (buttonIndex === 2) {
                            localStorage.setItem("morePhoto", "Library");
                            Tiggr.navigateTo('OACameraExpense', {
                                transition: 'slide',
                                reverse: false
                            });
                        }
                        if (buttonIndex === 3) {
                            localStorage.setItem("morePhoto", "Remove");
                            Tiggr.navigateTo('OACameraExpense', {
                                transition: 'slide',
                                reverse: false
                            });
                        }
                        if (buttonIndex === 4) {
                            localStorage.setItem("isCopy", "true");
                            Tiggr.navigateTo('OACameraExpense', {
                                transition: 'slide',
                                reverse: false
                            });
                        }
                        if (buttonIndex === 5) {
                            // hoping this removes the buttons more/delete from grid after cancel
                            $('.aDeleteBtn').remove();
                            $('.aMoreBtn').remove();
                        }
                    }

                });
            },
            swiperight: function() {
                setVar_('lv_tagId', 'home_mobilelabel1_TagID', 'text', '', this);
                setVar_('lv_checkExpenseType', 'home_mobilelabel1_Type', 'text', '', this);
                localStorage.setItem('lv_favtagId', '');
                setVar_('sessionGroup', 'home_mobilelabel_group', 'text', '', this);
                Tiggr.navigateTo('OACameraExpense', {
                    transition: 'slide',
                    reverse: false
                });
            },
            tap: function() {
                setVar_('lv_tagId', 'home_mobilelabel1_TagID', 'text', '', this);
                setVar_('lv_checkExpenseType', 'home_mobilelabel1_Type', 'text', '', this);
                localStorage.setItem('lv_favtagId', '');
                setVar_('sessionGroup', 'home_mobilelabel_group', 'text', '', this);
            },
            vclick: function() {
                setVar_('lv_tagId', 'home_mobilelabel1_TagID', 'text', '', this);
                setVar_('lv_checkExpenseType', 'home_mobilelabel1_Type', 'text', '', this);
                setVar_('sessionGroup', 'home_mobilelabel_group', 'text', '', this);
                localStorage.setItem('lv_favtagId', '');
                Tiggr.navigateTo('OACameraExpense', {
                    transition: 'slide',
                    reverse: false
                });

                ;
            },
        });

        $('#home_mobilecontainer1 [name="mobileDelete"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    showSpinner();
                    Tiggzi('mobilegroupedbuttons1_38').hide();
                    var expenseForm = [];
                    var myJSON = "";
                    myJSON = JSON.stringify({
                        expenseForm: expenseForm
                    });
                    localStorage.setItem("expenseForm", myJSON);
                    localStorage.setItem("expenseRaw", "");
                    localStorage.setItem('SendCounter', "");
                    showMenuCounters();
                    try {
                        ExpenseJSONRead.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    hideSpinner();

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobileUpload"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    toastDelay = 1000; //message show time
                    toast("Establishing Connection");
                    var screen = "home"; //Apply to this screen by name
                    var text = "LOADING"; //any text here
                    spinnerFull(screen, text); //this runs the function;
                    ebisConnection();

                }
            },
        });
        $('#home_mobilecontainer1 [name="MobileFetch"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('mobilegroupedbuttons1_38').hide();

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobileAddExpense"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('mobilegroupedbuttons1_38').hide();
                    Tiggzi('mobilebuttonsCamera').show();

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobileCancel_1"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('mobilegroupedbuttons1_38').hide();

                }
            },
        });

        $('#home_mobilecontainer1 [name="mobilebuttonTake"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    localStorage.setItem('PhotoType', 'Camera');
                    Tiggzi('mobilebuttonsCamera').hide();
                    if (!$(this).attr('disabled')) {
                        Tiggr.navigateTo('ebisCameraExpense', {
                            transition: 'pop',
                            reverse: false,
                        });
                    };

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobilebuttonLibrary"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    localStorage.setItem('PhotoType', 'Photolibrary');
                    Tiggzi('mobilebuttonsCamera').hide();
                    if (!$(this).attr('disabled')) {
                        Tiggr.navigateTo('ebisCameraExpense', {
                            transition: 'pop',
                            reverse: false
                        });
                    }

                    ;

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobilebuttonMiles"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('mobilebuttonsCamera').hide();
                    if (!$(this).attr('disabled')) {
                        Tiggr.navigateTo('ebisMileageExpense', {
                            transition: 'pop',
                            reverse: false
                        });
                    };

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobilebuttonFav"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('mobilebuttonsCamera').hide();

                }
            },
        });
        $('#home_mobilecontainer1 [name="mobileCancel"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Tiggzi('mobilebuttonsCamera').hide();

                }
            },
        });
        $('#home_mobilecontainer1 [name="buttonCamera"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    localStorage.setItem('lv_tagId', '');
                    Tiggzi('mobilegroupedbuttons1_38').hide();
                    Tiggzi('mobilebuttonsCamera').show();

                }
            },
        });

        $('#home_mobilecontainer1 [name="mobilelistitem_256"]').die().live({
            vclick: function() {
                Appery.navigateTo('aboutus', {
                    transition: 'pop',
                    reverse: false
                });
            },
        });

    }

    $("#home").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        home_beforeshow();
    });

    if (runBeforeShow) {
        home_beforeshow();
    } else {
        home_onLoad();
    }

}

$("#home").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    home_js();
});

ebisCameraExpense_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobileDoneReceipt': 'ebisCameraExpense_mobileDoneReceipt',
        'mobilegrid_83': 'ebisCameraExpense_mobilegrid_83',
        'mobilegridcell_84': 'ebisCameraExpense_mobilegridcell_84',
        'mobilelabel1_97': 'ebisCameraExpense_mobilelabel1_97',
        'mobilegridcell_85': 'ebisCameraExpense_mobilegridcell_85',
        'mobileDate': 'ebisCameraExpense_mobileDate',
        'mobilegridcell_86': 'ebisCameraExpense_mobilegridcell_86',
        'mobilelabel1_102': 'ebisCameraExpense_mobilelabel1_102',
        'mobilegridcell_87': 'ebisCameraExpense_mobilegridcell_87',
        'mobileType': 'ebisCameraExpense_mobileType',
        'mobileselectmenuitem1': 'ebisCameraExpense_mobileselectmenuitem1',
        'mobilegridcell_92': 'ebisCameraExpense_mobilegridcell_92',
        'mobilelabel1_90': 'ebisCameraExpense_mobilelabel1_90',
        'mobilegridcell_93': 'ebisCameraExpense_mobilegridcell_93',
        'mobileReason': 'ebisCameraExpense_mobileReason',
        'mobilegridcell_94': 'ebisCameraExpense_mobilegridcell_94',
        'mobilelabel1_91': 'ebisCameraExpense_mobilelabel1_91',
        'mobilegridcell_95': 'ebisCameraExpense_mobilegridcell_95',
        'mobileAmount': 'ebisCameraExpense_mobileAmount',
        'mobilegridcell_98': 'ebisCameraExpense_mobilegridcell_98',
        'mobilelabel1_104': 'ebisCameraExpense_mobilelabel1_104',
        'mobilegridcell_99': 'ebisCameraExpense_mobilegridcell_99',
        'mobileNotes': 'ebisCameraExpense_mobileNotes',
        'mobilebutton1_48': 'ebisCameraExpense_mobilebutton1_48',
        'mobileImage': 'ebisCameraExpense_mobileImage',
        'button_delete': 'ebisCameraExpense_button_delete',
        'button_fav': 'ebisCameraExpense_button_fav',
        'button_copy': 'ebisCameraExpense_button_copy'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'ebisCameraExpense';

    /*
     * Nonvisual components
     */
    var datasources = [];

    mobilecamera1 = new Appery.DataSource(CameraService, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisCameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['imageDataBase64'],
            'ID': 'mobileImage',
            'ATTR': 'src'
        }, {
            'PATH': ['imageDataBase64'],
            'ID': '___local_storage___',
            'ATTR': 'lv_mobileImage'
        }],
        'requestMapping': [{
            'PATH': ['quality'],
            'ATTR': '75'
        }, {
            'PATH': ['destinationType'],
            'ATTR': 'Data URL'
        }, {
            'PATH': ['sourcetype'],
            'ATTR': 'Camera',
            'TRANSFORMATION': function(value) {
                return localStorage.getItem('PhotoType');
            }
        }, {
            'PATH': ['allowedit'],
            'ATTR': 'true'
        }, {
            'PATH': ['encodingType'],
            'ATTR': 'JPEG'
        }, {
            'PATH': ['targetWidth'],
            'ATTR': '800'
        }, {
            'PATH': ['targetHeight'],
            'ATTR': '600'
        }]
    });

    datasources.push(mobilecamera1);

    ExpenseJSONWrite = new Appery.DataSource(ExpenseJSON_Write, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisCameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(ExpenseJSONWrite);

    ExpenseJSONread = new Appery.DataSource(ExpenseJSONRow, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisCameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['expenseForm[0]', 'expenseType'],
            'ID': 'mobileType',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseReason'],
            'ID': 'mobileReason',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseDate'],
            'ID': 'mobileDate',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseAmount'],
            'ID': 'mobileAmount',
            'ATTR': 'value',
            'TRANSFORMATION': function(value, element) {
                $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                if (value > 25) {
                    var outsdo = Tiggzi('mobileAmount').parent(); //get Div of Jobs Pic
                    $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                    var StyleTask = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '10px 10px 1px #000',
                        'font-weight': 'bold',
                        'font-size': '80%',
                        'margin-left': '50px',
                        'margin-top': '-28px'
                    };
                    var StyleJob = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '8px 8px 1px #000',
                        'font-weight': 'bold',
                        'margin-left': '65px',
                        'margin-top': '-48px'
                    };
                    $('<p id="outofpolicy">').appendTo(outsdo).text("Out of Policy").css(StyleTask);
                }

            }
        }, {
            'PATH': ['expenseForm[0]', 'expenseNotes'],
            'ID': 'mobileNotes',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseImage'],
            'ID': 'mobileImage',
            'ATTR': 'src'
        }],
        'requestMapping': [{
            'PATH': ['expense_ID'],
            'ID': '___local_storage___',
            'ATTR': '_tagId'
        }]
    });

    datasources.push(ExpenseJSONread);

    FavJSONWrite = new Appery.DataSource(FavJSON_Write, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisCameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(FavJSONWrite);

    /*
     * Events and handlers
     */

    // Before Show
    ebisCameraExpense_beforeshow = function() {
        Appery.CurrentScreen = "ebisCameraExpense";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_2231_onLoad = ebisCameraExpense_onLoad = function() {
        screen_2231_elementsExtraJS();
        Tiggzi('mobilecontainer1').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer1').css('background-size', 'cover');
        Tiggzi('button_delete').css('background-image', 'url("' + Tiggzi.getImagePath('delete_notes.png') + '")');
        Tiggzi('button_delete').css('background-repeat', 'no-repeat');
        Tiggzi('button_delete').css('background-size', 'cover');
        Tiggzi('button_copy').css('background-image', 'url("' + Tiggzi.getImagePath('copy.png') + '")');
        Tiggzi('button_copy').css('background-repeat', 'no-repeat');
        Tiggzi('button_copy').css('background-size', 'cover');
        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
        Tiggzi('button_fav').css('background-repeat', 'no-repeat');
        Tiggzi('button_fav').css('background-size', 'cover');
        localStorage.setItem("FavExpense", "no");
        Tiggzi("mobilelabel1_90").get(0).innerHTML += '<span style="color:red">*</span>';
        Appery("mobileReason").parent().css('border', '2px solid #ff0000');
        Tiggzi("mobilelabel1_91").get(0).innerHTML += '<span style="color:red">*</span>';
        Appery("mobileAmount").parent().css('border', '2px solid #ff0000');
        ebisExecuteServices();

        // TODO fire device events only if necessary (with JS logic)
        ebisCameraExpense_deviceEvents();
        ebisCameraExpense_windowEvents();
        screen_2231_elementsEvents();
    }

    // screen window events
    screen_2231_windowEvents = ebisCameraExpense_windowEvents = function() {
        $('#ebisCameraExpense').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#ebisCameraExpense').bind({
            pageshow: function() {
                Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
                Tiggzi('button_fav').css('background-repeat', 'no-repeat');
                Tiggzi('button_fav').css('background-size', 'cover');
                localStorage.setItem("FavExpense", "no");
                ebisExecuteServices();
            },
        });

    }

    // device events
    ebisCameraExpense_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_2231_elementsExtraJS = ebisCameraExpense_elementsExtraJS = function() {
        // screen (ebisCameraExpense) extra code

        /* mobileType */

        $("#ebisCameraExpense_mobileType").parent().find("a.ui-btn").attr("tabindex", "4");

    }

    // screen elements handler
    screen_2231_elementsEvents = ebisCameraExpense_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#ebisCameraExpense_mobileheader1 [name="mobileDoneReceipt"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('lv_mobileImage', 'ebisCameraExpense_mobileImage', 'src', '', this);
                    ReceiptFormDone();
                    Appery.navigateTo('home', {
                        transition: 'fade',
                        reverse: false
                    });

                }
            },
        });

        $('#ebisCameraExpense_mobilecontainer1 [name="mobileAmount"]').die().live({
            change: function() { // Tiggzi('cExpAmount').val(formatMoney(Tiggzi("cExpAmount").val()));
                var num = Tiggzi('mobileAmount').val();
                //var numReturn = formatGBP(parseFloat(num));
                $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                if (num > 25.00) {
                    var outsdo = Tiggzi('mobileAmount').parent(); //get Div of Jobs Pic
                    $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                    var StyleTask = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '10px 10px 1px #000',
                        'font-weight': 'bold',
                        'font-size': '80%',
                        'margin-left': '50px',
                        'margin-top': '-28px'
                    };
                    var StyleJob = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '8px 8px 1px #000',
                        'font-weight': 'bold',
                        'margin-left': '65px',
                        'margin-top': '-48px'
                    };
                    $('<p id="outofpolicy">').appendTo(outsdo).text("Out of Policy").css(StyleTask);
                }

                ;
            },
        });

        $('#ebisCameraExpense_mobilecontainer1 [name="mobilebutton1_48"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('lv_mobileType', 'ebisCameraExpense_mobileType', 'value', '', this);
                    setVar_('lv_mobileAmount', 'ebisCameraExpense_mobileAmount', 'text', '', this);
                    setVar_('lv_mobileReason', 'ebisCameraExpense_mobileReason', 'text', '', this);
                    localStorage.setItem('lv_mobileMilesClaim', '');
                    localStorage.setItem('lv_mobileMilesRate', '');
                    setVar_('lv_mobileDate', 'ebisCameraExpense_mobileDate', 'text', '', this);
                    setVar_('lv_mobileImage', 'ebisCameraExpense_mobileImage', 'src', '', this);
                    setVar_('lv_mobileNotes', 'ebisCameraExpense_mobileNotes', 'text', '', this);
                    try {
                        ExpenseJSONWrite.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    Appery.navigateTo('home', {
                        transition: 'slide',
                        reverse: true
                    });

                }
            },
        });
        $('#ebisCameraExpense_mobilecontainer1 [name="mobileImage"]').die().live({
            swipeleft: function() {
                try {
                    mobilecamera1.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
            },
            swiperight: function() {
                try {
                    mobilecamera1.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
            },
        });

        $('#ebisCameraExpense_mobilefooter1 [name="button_fav"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    if (localStorage.getItem("FavExpense") == 'no') {
                        localStorage.setItem("FavExpense", "yes");
                        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('favblue.png') + '")');
                        Tiggzi('button_fav').css('background-repeat', 'no-repeat');
                    } else {
                        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
                        localStorage.setItem("FavExpense", "no");
                    };

                }
            },
        });

    }

    $("#ebisCameraExpense").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        ebisCameraExpense_beforeshow();
    });

    if (runBeforeShow) {
        ebisCameraExpense_beforeshow();
    } else {
        ebisCameraExpense_onLoad();
    }

}

$("#ebisCameraExpense").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    ebisCameraExpense_js();
});

aboutus_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilegrid_21': 'aboutus_mobilegrid_21',
        'mobilegridcell_22': 'aboutus_mobilegridcell_22',
        'mobilegridcell_33': 'aboutus_mobilegridcell_33',
        'mobileimage_31': 'aboutus_mobileimage_31',
        'mobilegridcell_34': 'aboutus_mobilegridcell_34',
        'mobilelist_3': 'aboutus_mobilelist_3',
        'mobilelistitem_4': 'aboutus_mobilelistitem_4',
        'mobilelistitembutton_5': 'aboutus_mobilelistitembutton_5',
        'mobilelistitem_6': 'aboutus_mobilelistitem_6',
        'mobilelistitembutton_7': 'aboutus_mobilelistitembutton_7',
        'mobilelistitem_8': 'aboutus_mobilelistitem_8',
        'mobilelistitembutton_9': 'aboutus_mobilelistitembutton_9',
        'mobilelistitem_13': 'aboutus_mobilelistitem_13',
        'mobilelistitembutton_14': 'aboutus_mobilelistitembutton_14',
        'mobilelistitem_19': 'aboutus_mobilelistitem_19',
        'mobilelistitembutton_20': 'aboutus_mobilelistitembutton_20',
        'mobilegrid_15': 'aboutus_mobilegrid_15',
        'mobilegridcell_16': 'aboutus_mobilegridcell_16'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'aboutus';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    aboutus_beforeshow = function() {
        Appery.CurrentScreen = "aboutus";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_5058_onLoad = aboutus_onLoad = function() {
        screen_5058_elementsExtraJS();
        //Tiggzi('mobileAbout').css('background-size','cover');
        Tiggzi('mobileAbout').css('background-image', 'url("' + Tiggzi.getImagePath('abs-head-adv2.png') + '")');
        Tiggzi('mobileAbout').css('background-repeat', 'no-repeat');
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        Tiggzi("mobiletextarea_2").attr("disabled", "disabled");
        //Tiggzi("mobiletextarea_2").css("height", "10px");
        ;

        // TODO fire device events only if necessary (with JS logic)
        aboutus_deviceEvents();
        aboutus_windowEvents();
        screen_5058_elementsEvents();
    }

    // screen window events
    screen_5058_windowEvents = aboutus_windowEvents = function() {
        $('#aboutus').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });

    }

    // device events
    aboutus_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_5058_elementsExtraJS = aboutus_elementsExtraJS = function() {
        // screen (aboutus) extra code

        /* mobilelist_3 */

        listView = $("#aboutus_mobilelist_3");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#aboutus_mobilelist_3 .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* mobilelistitem_4 */

        /* mobilelistitem_6 */

        /* mobilelistitem_8 */

        /* mobilelistitem_13 */

        /* mobilelistitem_19 */

    }

    // screen elements handler
    screen_5058_elementsEvents = aboutus_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#aboutus_mobilecontainer [name="mobilelistitem_19"]').die().live({
            vclick: function() {
                Appery.navigateTo('feedback', {
                    transition: 'slide',
                    reverse: false
                });
            },
        });

    }

    $("#aboutus").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        aboutus_beforeshow();
    });

    if (runBeforeShow) {
        aboutus_beforeshow();
    } else {
        aboutus_onLoad();
    }

}

$("#aboutus").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    aboutus_js();
});

settings_account_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'settings_account_mobilelabel_12',
        'mobilegrid_33': 'settings_account_mobilegrid_33',
        'mobilegridcell_34': 'settings_account_mobilegridcell_34',
        'mobilebutton_41': 'settings_account_mobilebutton_41',
        'mobilebutton_40': 'settings_account_mobilebutton_40'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings_account';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    settings_account_beforeshow = function() {
        Appery.CurrentScreen = "settings_account";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_FFE5_onLoad = settings_account_onLoad = function() {
        screen_FFE5_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        settings_account_deviceEvents();
        settings_account_windowEvents();
        screen_FFE5_elementsEvents();
    }

    // screen window events
    screen_FFE5_windowEvents = settings_account_windowEvents = function() {
        $('#settings_account').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });

    }

    // device events
    settings_account_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_FFE5_elementsExtraJS = settings_account_elementsExtraJS = function() {
        // screen (settings_account) extra code

    }

    // screen elements handler
    screen_FFE5_elementsEvents = settings_account_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

    }

    $("#settings_account").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_account_beforeshow();
    });

    if (runBeforeShow) {
        settings_account_beforeshow();
    } else {
        settings_account_onLoad();
    }

}

$("#settings_account").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_account_js();
});

milesoption_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'milesoption_mobilelabel_12',
        'ServerConnection': 'milesoption_ServerConnection',
        'mobileradiobutton_3': 'milesoption_mobileradiobutton_3',
        'mobilelabel_7': 'milesoption_mobilelabel_7',
        'mobileradiobutton_4': 'milesoption_mobileradiobutton_4',
        'mobilelabel_9': 'milesoption_mobilelabel_9',
        'mobileradiobutton_5': 'milesoption_mobileradiobutton_5',
        'mobilelabel_10': 'milesoption_mobilelabel_10',
        'mobileradiobutton_6': 'milesoption_mobileradiobutton_6',
        'mobilelabel_11': 'milesoption_mobilelabel_11'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'milesoption';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    milesoption_beforeshow = function() {
        Appery.CurrentScreen = "milesoption";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_B107_onLoad = milesoption_onLoad = function() {
        screen_B107_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        milesoption_deviceEvents();
        milesoption_windowEvents();
        screen_B107_elementsEvents();
    }

    // screen window events
    screen_B107_windowEvents = milesoption_windowEvents = function() {
        $('#milesoption').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#milesoption').bind({
            pageshow: function() { // get sync value and display
                var data = localStorage.getItem("localSettings");
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.localSettings);
                var parsed = JSON.parse(JSONTypes);
                var $radios = $('input:radio[name=ServerConnection]');

                for (var i = 0; i < parsed.length; ++i)
                $radios.filter('[value="' + parsed[i].Mileage + '"]').prop('checked', true).checkboxradio("refresh");
            },
        });

    }

    // device events
    milesoption_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_B107_elementsExtraJS = milesoption_elementsExtraJS = function() {
        // screen (milesoption) extra code

    }

    // screen elements handler
    screen_B107_elementsEvents = milesoption_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#milesoption_mobilecontainer [name="ServerConnection"]').die().live({
            change: function() {
                var choose = $('input:radio[name=ServerConnection]:checked').val();

                // update local settings and write local file
                setLocalSettings("Mileage", choose);
            },
        });

    }

    $("#milesoption").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        milesoption_beforeshow();
    });

    if (runBeforeShow) {
        milesoption_beforeshow();
    } else {
        milesoption_onLoad();
    }

}

$("#milesoption").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    milesoption_js();
});

settings_UserID_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'settings_UserID_mobilelabel_12',
        'mobilegrid_15': 'settings_UserID_mobilegrid_15',
        'mobilegridcell_16': 'settings_UserID_mobilegridcell_16',
        'mobilelabel_20': 'settings_UserID_mobilelabel_20',
        'mobilegridcell_17': 'settings_UserID_mobilegridcell_17',
        'mobiletextinput_userID': 'settings_UserID_mobiletextinput_userID',
        'Save': 'settings_UserID_Save',
        'mobilegridcell_23': 'settings_UserID_mobilegridcell_23',
        'mobilebutton_cancel': 'settings_UserID_mobilebutton_cancel',
        'mobilegridcell_24': 'settings_UserID_mobilegridcell_24',
        'mobilebutton_save': 'settings_UserID_mobilebutton_save'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings_UserID';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    settings_UserID_beforeshow = function() {
        Appery.CurrentScreen = "settings_UserID";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_7126_onLoad = settings_UserID_onLoad = function() {
        screen_7126_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        settings_UserID_deviceEvents();
        settings_UserID_windowEvents();
        screen_7126_elementsEvents();
    }

    // screen window events
    screen_7126_windowEvents = settings_UserID_windowEvents = function() {
        $('#settings_UserID').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#settings_UserID').bind({
            pageshow: function() {
                Appery('mobilebutton_save').removeClass('buttonOK');
                Appery('mobilebutton_save').addClass('ui-disabled');
                var mandatoryList = Appery('mobiletextinput_userID');
                Appery('mobiletextinput_userID').addClass('Mandatory');
                $(mandatoryList).bind('keyup', function() {

                    if (allFilled()) {
                        Appery('mobilebutton_save').removeClass('ui-disabled');
                        Appery('mobilebutton_save').addClass('buttonOK');
                    } else {
                        Appery('mobilebutton_save').removeClass('buttonOK');
                        Appery('mobilebutton_save').addClass('ui-disabled')
                    }
                });

                var data = localStorage.getItem("localSettings");
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.localSettings);
                var parsed = JSON.parse(JSONTypes);
                for (var i = 0; i < parsed.length; ++i)
                Appery('mobiletextinput_userID').val(parsed[i].UserID);
            },
        });

    }

    // device events
    settings_UserID_deviceEvents = function() {

        document.addEventListener("deviceready", function() {
            $(document).unbind('backbutton ').bind({
                "backbutton": function() {
                    Appery('mobiletextinput_userID').removeClass('Mandatory');
                },
            });
        });
    }

    // screen elements extra js
    screen_7126_elementsExtraJS = settings_UserID_elementsExtraJS = function() {
        // screen (settings_UserID) extra code

    }

    // screen elements handler
    screen_7126_elementsEvents = settings_UserID_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#settings_UserID_mobilecontainer [name="mobilebutton_cancel"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery('mobiletextinput_userID').removeClass('Mandatory');
                    history.back();

                }
            },
        });

        $('#settings_UserID_mobilecontainer [name="mobilebutton_save"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery('mobiletextinput_userID').removeClass('Mandatory');
                    setLocalSettings("UserID", Appery('mobiletextinput_userID').val());
                    history.back();

                }
            },
        });

    }

    $("#settings_UserID").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_UserID_beforeshow();
    });

    if (runBeforeShow) {
        settings_UserID_beforeshow();
    } else {
        settings_UserID_onLoad();
    }

}

$("#settings_UserID").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_UserID_js();
});

settings_Network_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'settings_Network_mobilelabel_12',
        'mobilegrid_15': 'settings_Network_mobilegrid_15',
        'mobilegridcell_16': 'settings_Network_mobilegridcell_16',
        'mobilelabel_20': 'settings_Network_mobilelabel_20',
        'mobilegridcell_17': 'settings_Network_mobilegridcell_17',
        'mobiletextinput_server': 'settings_Network_mobiletextinput_server',
        'mobilegridcell_25': 'settings_Network_mobilegridcell_25',
        'mobilelabel_27': 'settings_Network_mobilelabel_27',
        'mobilegridcell_26': 'settings_Network_mobilegridcell_26',
        'mobiletextinput_key': 'settings_Network_mobiletextinput_key',
        'Save': 'settings_Network_Save',
        'mobilegridcell_23': 'settings_Network_mobilegridcell_23',
        'mobilebutton_cancel': 'settings_Network_mobilebutton_cancel',
        'mobilegridcell_24': 'settings_Network_mobilegridcell_24',
        'mobilebutton_save': 'settings_Network_mobilebutton_save'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings_Network';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    settings_Network_beforeshow = function() {
        Appery.CurrentScreen = "settings_Network";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_E9DB_onLoad = settings_Network_onLoad = function() {
        screen_E9DB_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        settings_Network_deviceEvents();
        settings_Network_windowEvents();
        screen_E9DB_elementsEvents();
    }

    // screen window events
    screen_E9DB_windowEvents = settings_Network_windowEvents = function() {
        $('#settings_Network').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#settings_Network').bind({
            pageshow: function() {
                Appery('mobilebutton_save').removeClass('buttonOK');
                Appery('mobilebutton_save').addClass('ui-disabled');
                var mandatoryList = Appery('mobiletextinput_server')
                Appery('mobiletextinput_server').addClass('Mandatory');
                $(mandatoryList).bind('keyup', function() {

                    if (allFilled()) {
                        Appery('mobilebutton_save').removeClass('ui-disabled');
                        Appery('mobilebutton_save').addClass('buttonOK');
                    } else {
                        Appery('mobilebutton_save').removeClass('buttonOK');
                        Appery('mobilebutton_save').addClass('ui-disabled')
                    }
                });
                var mandatoryList = Appery('mobiletextinput_key');
                Appery('mobiletextinput_key').addClass('Mandatory');
                $(mandatoryList).bind('keyup', function() {

                    if (allFilled()) {
                        Appery('mobilebutton_save').removeClass('ui-disabled');
                        Appery('mobilebutton_save').addClass('buttonOK');
                    } else {
                        Appery('mobilebutton_save').removeClass('buttonOK');
                        Appery('mobilebutton_save').addClass('ui-disabled')
                    }
                });

                var data = localStorage.getItem("localSettings");
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.localSettings);
                var parsed = JSON.parse(JSONTypes);
                for (var i = 0; i < parsed.length; ++i) {
                    Appery('mobiletextinput_server').val(parsed[i].Network);
                    Appery('mobiletextinput_key').val(parsed[i].NetKey);
                };
            },
        });

    }

    // device events
    settings_Network_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_E9DB_elementsExtraJS = settings_Network_elementsExtraJS = function() {
        // screen (settings_Network) extra code

    }

    // screen elements handler
    screen_E9DB_elementsEvents = settings_Network_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#settings_Network_mobilecontainer [name="mobilebutton_cancel"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    history.back();

                }
            },
        });

        $('#settings_Network_mobilecontainer [name="mobilebutton_save"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setLocalSettings("Network", Appery('mobiletextinput_server').val());
                    setLocalSettings("NetKey", Appery('mobiletextinput_key').val());
                    history.back();

                }
            },
        });

    }

    $("#settings_Network").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_Network_beforeshow();
    });

    if (runBeforeShow) {
        settings_Network_beforeshow();
    } else {
        settings_Network_onLoad();
    }

}

$("#settings_Network").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_Network_js();
});

UITestBed_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mainTable': 'UITestBed_mainTable',
        'mobilegridcell_15': 'UITestBed_mobilegridcell_15',
        'cExpGroup_Lab': 'UITestBed_cExpGroup_Lab',
        'mobilegridcell_16': 'UITestBed_mobilegridcell_16',
        'cExpGroup': 'UITestBed_cExpGroup',
        'mobilegridcell_20': 'UITestBed_mobilegridcell_20',
        'cExpType_Lab': 'UITestBed_cExpType_Lab',
        'mobilegridcell_21': 'UITestBed_mobilegridcell_21',
        'cExpType': 'UITestBed_cExpType',
        'mobileselectmenuitem_37': 'UITestBed_mobileselectmenuitem_37',
        'mobilegridcell_22': 'UITestBed_mobilegridcell_22',
        'cPrice_Lab': 'UITestBed_cPrice_Lab',
        'mobilegridcell_23': 'UITestBed_mobilegridcell_23',
        'cPrice': 'UITestBed_cPrice',
        'mobilegridcell_29': 'UITestBed_mobilegridcell_29',
        'mobilegridcell_30': 'UITestBed_mobilegridcell_30',
        'mobilegridcell_31': 'UITestBed_mobilegridcell_31',
        'mobilegridcell_32': 'UITestBed_mobilegridcell_32'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'UITestBed';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    UITestBed_beforeshow = function() {
        Appery.CurrentScreen = "UITestBed";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_185F_onLoad = UITestBed_onLoad = function() {
        screen_185F_elementsExtraJS();

        // TODO fire device events only if necessary (with JS logic)
        UITestBed_deviceEvents();
        UITestBed_windowEvents();
        screen_185F_elementsEvents();
    }

    // screen window events
    screen_185F_windowEvents = UITestBed_windowEvents = function() {
        $('#UITestBed').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#UITestBed').bind({
            pageshow: function() {

                //myReady();
                //  document.getElementById("mobilecontainer1").style.display = "none";
                var myTable = Tiggzi("mainTable").get(0);
                var innerRows = myTable.getElementsByTagName("tr");

                var myFirstRow = myTable.rows[3];
                var myDummyRow = myTable.rows[4];
                var myExpGrpRow = myTable.rows[0];
                var myExpTypeRow = myTable.rows[1];
                var myPriceRow = myTable.rows[2];
                var thisRow;
                var tmpNode;

                for (i = 0; i < fldArray.length; i++) {
                    cFldName = fldArray[i].fldName;
                    //  cRowName = cFldName  
                    cLabelName = cFldName + "_Lab";
                    cLabel = fldArray[i].fldLabel;

                    // shuffle the fields into order
                    if (cFldName == 'cExpGroup') {
                        thisRow = myExpGrpRow
                    };
                    if (cFldName == 'cExpType') {
                        thisRow = myExpTypeRow
                    };
                    if (cFldName == 'cPrice') {
                        thisRow = myPriceRow
                    };
                    //  alert(cRowName);
                    //thisRow = document.getElementById(cRowName);
                    //alert(cRowName);
                    tmpNode = myTable.tBodies[0].replaceChild(thisRow, myFirstRow);
                    myTable.tBodies[0].insertBefore(tmpNode, myDummyRow);
                    // Hide & Show
                    if (fldArray[i].fldHide == 'H') {
                        thisRow.style.display = "none";
                    } else {
                        thisRow.style.display = "";
                    }

                    // Set Labels
                    // Tiggzi(cLabelName).get(0)
                    Tiggzi(cLabelName).get(0).innerHTML = cLabel + ':';

                    // Mandatory & Disabled
                    if (fldArray[i].fldMode == 'M') {
                        Tiggzi(cLabelName).get(0).innerHTML += '<span style="color:red">*</span>';

                        Appery(cFldName).parent().css('border', '2px solid #ff0000');
                        // Tiggzi(cFldName).css('border','1px red solid ');
                    } else if (fldArray[i].fldMode == 'D') {
                        Tiggzi(cFldName).get(0).readOnly = true;
                        var fldMobileAmount = Tiggr(cFldName);
                        fldMobileAmount.addClass('ui-disabled');
                        Appery(cFldName).parent().css('border', '1px solid #CCCCCC');
                        //Tiggzi(cFldName).get(0).style.backgroundColor = "#EEEEEE";
                    }

                };
                // document.getElementById("UITest").style.display = "";
                //document.getElementById("mobilecontainer1").style.display = "";
                $(".UITest").css('display', 'block!important');
                $(".UITest").show();
            },
        });

    }

    // device events
    UITestBed_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_185F_elementsExtraJS = UITestBed_elementsExtraJS = function() {
        // screen (UITestBed) extra code

        /* cExpType */

        $("#UITestBed_cExpType").parent().find("a.ui-btn").attr("tabindex", "2");

    }

    // screen elements handler
    screen_185F_elementsEvents = UITestBed_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

    }

    $("#UITestBed").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        UITestBed_beforeshow();
    });

    if (runBeforeShow) {
        UITestBed_beforeshow();
    } else {
        UITestBed_onLoad();
    }

}

$("#UITestBed").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    UITestBed_js();
});

settings_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobileUser': 'settings_mobileUser',
        'mobilelist_20': 'settings_mobilelist_20',
        'mobilelistitem_21': 'settings_mobilelistitem_21',
        'mobilelistitembutton_22': 'settings_mobilelistitembutton_22',
        'mobilelistitem_27': 'settings_mobilelistitem_27',
        'mobilelistitembutton_28': 'settings_mobilelistitembutton_28',
        'mobilegrid_42': 'settings_mobilegrid_42',
        'mobilegridcell_43': 'settings_mobilegridcell_43',
        'mobilelabel_52': 'settings_mobilelabel_52',
        'mobilegridcell_45': 'settings_mobilegridcell_45',
        'mobilelabel_ConnectServer': 'settings_mobilelabel_ConnectServer',
        'mobilelistitem_29': 'settings_mobilelistitem_29',
        'mobilelistitembutton_30': 'settings_mobilelistitembutton_30',
        'mobilegrid_47': 'settings_mobilegrid_47',
        'mobilegridcell_48': 'settings_mobilegridcell_48',
        'mobilelabel_63': 'settings_mobilelabel_63',
        'mobilegridcell_50': 'settings_mobilegridcell_50',
        'mobilelabel_CalcMiles': 'settings_mobilelabel_CalcMiles',
        'mobilelistitem_31': 'settings_mobilelistitem_31',
        'mobilelistitembutton_32': 'settings_mobilelistitembutton_32',
        'mobilegrid_58': 'settings_mobilegrid_58',
        'mobilegridcell_59': 'settings_mobilegridcell_59',
        'mobilelabel_54': 'settings_mobilelabel_54',
        'mobilegridcell_61': 'settings_mobilegridcell_61',
        'mobilelabel_Cache': 'settings_mobilelabel_Cache',
        'mobilelistitem_33': 'settings_mobilelistitem_33',
        'mobilelistitembutton_34': 'settings_mobilelistitembutton_34',
        'mobilelistitem_56': 'settings_mobilelistitem_56',
        'mobilelistitembutton_57': 'settings_mobilelistitembutton_57',
        'mobilegrid_66': 'settings_mobilegrid_66',
        'mobilegridcell_67': 'settings_mobilegridcell_67',
        'mobilelabel_71': 'settings_mobilelabel_71',
        'mobilegridcell_69': 'settings_mobilegridcell_69',
        'mobilelabel_user': 'settings_mobilelabel_user',
        'mobilelistitem_73': 'settings_mobilelistitem_73',
        'mobilelistitembutton_74': 'settings_mobilelistitembutton_74',
        'mobilegrid_77': 'settings_mobilegrid_77',
        'mobilegridcell_78': 'settings_mobilegridcell_78',
        'mobileRegUser': 'settings_mobileRegUser',
        'mobilegridcell_80': 'settings_mobilegridcell_80',
        'mobilelabel_network': 'settings_mobilelabel_network',
        'mobilelistitem_75': 'settings_mobilelistitem_75',
        'mobilelistitembutton_76': 'settings_mobilelistitembutton_76',
        'mobilegrid_84': 'settings_mobilegrid_84',
        'mobilegridcell_85': 'settings_mobilegridcell_85',
        'mobilelabel_89': 'settings_mobilelabel_89',
        'mobilegridcell_87': 'settings_mobilegridcell_87',
        'mobilelabel_account': 'settings_mobilelabel_account',
        'mobilelistitem_91': 'settings_mobilelistitem_91',
        'mobilelistitembutton_92': 'settings_mobilelistitembutton_92',
        'mobilelistitem_93': 'settings_mobilelistitem_93',
        'mobilelistitembutton_94': 'settings_mobilelistitembutton_94',
        'mobilegrid_95': 'settings_mobilegrid_95',
        'mobilegridcell_96': 'settings_mobilegridcell_96',
        'mobilelabel_100': 'settings_mobilelabel_100',
        'mobilegridcell_98': 'settings_mobilegridcell_98',
        'mobilelabel_sync': 'settings_mobilelabel_sync',
        'mobilelabel_101': 'settings_mobilelabel_101',
        'mobilelabel_syncdate': 'settings_mobilelabel_syncdate',
        'mobilegrid_15': 'settings_mobilegrid_15',
        'mobilegridcell_16': 'settings_mobilegridcell_16'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings';

    /*
     * Nonvisual components
     */
    var datasources = [];

    SettingsJSONRead = new Appery.DataSource(SettingsJSON_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['localSettings[0]', 'ConnectServer'],
            'ID': 'mobilelabel_ConnectServer',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'Mileage'],
            'ID': 'mobilelabel_CalcMiles',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'Cache'],
            'ID': 'mobilelabel_Cache',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'UserID'],
            'ID': 'mobilelabel_user',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'Network'],
            'ID': 'mobilelabel_network',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'NetKey'],
            'ID': '___local_storage___',
            'ATTR': 'ServerIPKey'
        }, {
            'PATH': ['localSettings[0]', 'Account'],
            'ID': 'mobilelabel_account',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'Sync'],
            'ID': 'mobilelabel_sync',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'SyncDate'],
            'ID': 'mobilelabel_syncdate',
            'ATTR': '@'
        }, {
            'PATH': ['localSettings[0]', 'Network'],
            'ID': '___local_storage___',
            'ATTR': 'ServerIPAddress'
        }],
        'requestMapping': []
    });

    datasources.push(SettingsJSONRead);

    /*
     * Events and handlers
     */

    // Before Show
    settings_beforeshow = function() {
        Appery.CurrentScreen = "settings";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_AF3C_onLoad = settings_onLoad = function() {
        screen_AF3C_elementsExtraJS();
        Tiggzi('mobileUser').css('background-image', 'url("' + Tiggzi.getImagePath('Settings27by27.jpg') + '")');
        Tiggzi('mobileUser').css('background-repeat', 'no-repeat');
        Tiggzi('mobileUser').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        ;

        // TODO fire device events only if necessary (with JS logic)
        settings_deviceEvents();
        settings_windowEvents();
        screen_AF3C_elementsEvents();
    }

    // screen window events
    screen_AF3C_windowEvents = settings_windowEvents = function() {
        $('#settings').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#settings').bind({
            pageshow: function() {
                try {
                    SettingsJSONRead.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
                var ResultData = localStorage.getItem("ResultGroups");
                if (!ResultData) {
                    Tiggzi('mobilelabel_syncdate').css('color', 'red');
                    Tiggzi('mobilelabel_syncdate').css('font-weight', 'bold');
                } else {
                    Tiggzi('mobilelabel_syncdate').css('color', 'black');
                    Tiggzi('mobilelabel_syncdate').css('font-weight', 'normal');
                };
            },
        });

    }

    // device events
    settings_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_AF3C_elementsExtraJS = settings_elementsExtraJS = function() {
        // screen (settings) extra code

        /* mobilelist_20 */

        listView = $("#settings_mobilelist_20");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#settings_mobilelist_20 .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* mobilelistitem_21 */

        /* mobilelistitem_27 */

        /* mobilelistitem_29 */

        /* mobilelistitem_31 */

        /* mobilelistitem_33 */

        /* mobilelistitem_56 */

        /* mobilelistitem_73 */

        /* mobilelistitem_75 */

        /* mobilelistitem_91 */

        /* mobilelistitem_93 */

    }

    // screen elements handler
    screen_AF3C_elementsEvents = settings_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#settings_mobilecontainer [name="mobilelistitem_27"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('settings_ConnectionServer', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

        $('#settings_mobilecontainer [name="mobilelistitem_29"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('milesoption', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

        $('#settings_mobilecontainer [name="mobilelistitem_31"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('settings_CacheLifetime', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

        $('#settings_mobilecontainer [name="mobilelistitem_56"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('settings_UserID', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

        $('#settings_mobilecontainer [name="mobilelistitem_73"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('settings_Network', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

        $('#settings_mobilecontainer [name="mobilelistitem_75"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('settings_account', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

        $('#settings_mobilecontainer [name="mobilelistitem_93"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('settings_Sync', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });

    }

    $("#settings").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_beforeshow();
    });

    if (runBeforeShow) {
        settings_beforeshow();
    } else {
        settings_onLoad();
    }

}

$("#settings").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_js();
});

favourites_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobileFavButton': 'favourites_mobileFavButton',
        'FavList': 'favourites_FavList',
        'mobilelistFav': 'favourites_mobilelistFav',
        'mobilelistitembutton_4': 'favourites_mobilelistitembutton_4',
        'mobilegrid_9': 'favourites_mobilegrid_9',
        'mobilegridcell_10': 'favourites_mobilegridcell_10',
        'mobilegridcell_11': 'favourites_mobilegridcell_11',
        'fav_expenseType': 'favourites_fav_expenseType',
        'Fav_expenseReason': 'favourites_Fav_expenseReason',
        'fav_expensefrom': 'favourites_fav_expensefrom',
        'fav_expenseGroup': 'favourites_fav_expenseGroup',
        'fav_expenseVisit': 'favourites_fav_expenseVisit',
        'fav_expenseClaimMiles': 'favourites_fav_expenseClaimMiles',
        'mobilegridcell_28': 'favourites_mobilegridcell_28',
        'Fav_expenseAmount': 'favourites_Fav_expenseAmount',
        'fav_expensePurpose': 'favourites_fav_expensePurpose',
        'fav_expenseTo': 'favourites_fav_expenseTo',
        'fav_expenseCalcMiles': 'favourites_fav_expenseCalcMiles',
        'fav_expenseNights': 'favourites_fav_expenseNights',
        'fav_expenseTag': 'favourites_fav_expenseTag',
        'mobilegrid_26': 'favourites_mobilegrid_26',
        'mobilegridcell_27': 'favourites_mobilegridcell_27'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'favourites';

    /*
     * Nonvisual components
     */
    var datasources = [];

    FavJsonRead = new Appery.DataSource(FavJSON_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements($.mobile.activePage.prop('id'));
            Appery("FavList").find("li").eq(0).hide();
            return;

            $t.refreshScreenFormElements("favourites");
        },
        'onSuccess': function(data) {
            Appery("FavList").listview({
                //autodividers: true,
                autodividersSelector: function(li) {
                    //Modify this function to generate divider text
                    var label = li.find("[name=fav_expenseGroup]"); //Find component
                    return label.text(); //Return label text
                }
            });

            Appery("FavList").listview("refresh"); //Refresh list component
            //Appery("FavList").trigger("listviewcreate"); //Initiate dividers creation
            //Appery("FavList").find("li").eq(0).hide(); //Hide first unused divider
            ;
        },
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['favForm'],
            'ID': 'mobilelistFav',
            'SET': [{
                'PATH': ['FavGroup'],
                'ID': 'fav_expenseGroup',
                'ATTR': '@'
            }, {
                'PATH': ['FavType'],
                'ID': 'fav_expenseType',
                'ATTR': '@'
            }, {
                'PATH': ['FavReason'],
                'ID': 'Fav_expenseReason',
                'ATTR': '@'
            }, {
                'PATH': ['FavAmount'],
                'ID': 'Fav_expenseAmount',
                'ATTR': '@'
            }, {
                'PATH': ['FavMilesClaim'],
                'ID': 'fav_expenseClaimMiles',
                'ATTR': '@'
            }, {
                'PATH': ['FavMilesRate'],
                'ID': 'fav_expenseCalcMiles',
                'ATTR': '@'
            }, {
                'PATH': ['FavFrom'],
                'ID': 'fav_expensefrom',
                'ATTR': '@'
            }, {
                'PATH': ['FavTo'],
                'ID': 'fav_expenseTo',
                'ATTR': '@'
            }, {
                'PATH': ['Fav_ID'],
                'ID': 'fav_expenseTag',
                'ATTR': '@'
            }, {
                'PATH': ['FavPurpose'],
                'ID': 'fav_expensePurpose',
                'ATTR': '@'
            }, {
                'PATH': ['FavVisit'],
                'ID': 'fav_expenseVisit',
                'ATTR': '@'
            }, {
                'PATH': ['FavNoNights'],
                'ID': 'fav_expenseNights',
                'ATTR': '@'
            }]
        }],
        'requestMapping': []
    });

    datasources.push(FavJsonRead);

    /*
     * Events and handlers
     */

    // Before Show
    favourites_beforeshow = function() {
        Appery.CurrentScreen = "favourites";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_8AA2_onLoad = favourites_onLoad = function() {
        screen_8AA2_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');
        Tiggzi('mobileFavButton').css('background-image', 'url("' + Tiggzi.getImagePath('favblue.png') + '")');
        Tiggzi('mobileFavButton').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobileFavButton').css('background-size', 'cover');

        ;
        try {
            FavJsonRead.execute({})
        } catch (ex) {
            console.log(ex.name + '  ' + ex.message);
            hideSpinner();
        };

        // TODO fire device events only if necessary (with JS logic)
        favourites_deviceEvents();
        favourites_windowEvents();
        screen_8AA2_elementsEvents();
    }

    // screen window events
    screen_8AA2_windowEvents = favourites_windowEvents = function() {
        $('#favourites').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#favourites').bind({
            pageshow: function() {
                try {
                    FavJsonRead.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
            },
        });

    }

    // device events
    favourites_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_8AA2_elementsExtraJS = favourites_elementsExtraJS = function() {
        // screen (favourites) extra code

        /* FavList */

        listView = $("#favourites_FavList");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#favourites_FavList .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* mobilelistFav */

    }

    // screen elements handler
    screen_8AA2_elementsEvents = favourites_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#favourites_mobilecontainer [name="mobilelistFav"]').die().live({
            swipeleft: function() {
                setVar_('lv_favtagId', 'favourites_fav_expenseTag', 'text', '', this);
                setVar_('sessionGroup', 'favourites_fav_expenseGroup', 'text', '', this);
                // reference the just swiped list item
                var $li = $(this);

                // remove all buttons first
                $('.aDeleteBtn').remove();
                $('.aMoreBtn').remove();
                $('.aCopyBtn').remove();
                // create buttons and div container
                var $aDeleteBtn = $('<a>Delete</a>').attr({
                    'data-role': 'button',
                    'data-mini': true,
                    'data-inline': 'true',
                    'class': 'aDeleteBtn ui-btn-up-r',
                    'href': $li.data('swipeurl')
                });
                var $aMoreBtn = $('<a>Copy</a>').attr({
                    'data-role': 'button',
                    'data-mini': true,
                    'data-inline': 'true',
                    'class': 'aMoreBtn ui-btn-up-grey',
                    'href': $li.data('swipeurl')
                });

                // insert swipe div into list item
                //$li.prepend($aDeleteBtn);
                //$li.fadeOut(150, function() {$li.prepend($aDeleteBtn); }); 
                //$li.fadeOut(150, function() {$aDeleteBtn.prependTo($li).button()}); 
                //$li.fadeIn(150); 
                $aMoreBtn.prependTo($li).button();
                $aDeleteBtn.prependTo($li).button();

                $li.find('.ui-btn').hide().animate({
                    width: 'toggle'
                }, 250);
                // override row click
                $li.bind('tap', function(e) {
                    // if the triggering object is a button, fire it's tap event
                    if (e.target.className.indexOf('aDeleteBtn') >= 0) $(e.target).trigger('tap');
                    if (e.target.className.indexOf('aMoreBtn') >= 0) $(e.target).trigger('tap');
                    e.gesture.stopDetect();
                    // remove any existing cancel buttons
                    $('.aDeleteBtn').remove();
                    $('.aMoreBtn').remove();
                    // remove the event
                });

                $('.aDeleteBtn').tap(function(e) {
                    $li.remove();
                    onswipe = false;
                    $("ul[id='swipedelete']").listview("refresh");
                    gridFavDelete();

                    try {
                        FavJsonRead.execute({});
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    }

                });

                $('.aMoreBtn').tap(function(e) {
                    onswipe = false;
                    localStorage.setItem("isCopy", "true");
                    localStorage.setItem("lv_tagId", "copy");
                    Tiggr.navigateTo('OACameraExpense', {
                        transition: 'slide',
                        reverse: false
                    });

                });
            },
            swiperight: function() {
                setVar_('lv_favtagId', 'favourites_fav_expenseTag', 'text', '', this);
                setVar_('sessionGroup', 'favourites_fav_expenseGroup', 'text', '', this);
                // reference the just swiped list item
                var $li = $(this);

                // remove all buttons first
                $('.aDeleteBtn').remove();
                $('.aMoreBtn').remove();
                $('.aCopyBtn').remove();
                // create buttons and div container
                var $aMoreBtn = $('<a>Copy</a>').attr({
                    'data-role': 'button',
                    'data-mini': true,
                    'data-inline': 'true',
                    'class': 'aCopyBtn ui-btn-up-grey',
                    'href': $li.data('swipeurl')
                });

                // insert swipe div into list item
                //$li.prepend($aDeleteBtn);
                //$li.fadeOut(150, function() {$li.prepend($aDeleteBtn); }); 
                //$li.fadeOut(150, function() {$aDeleteBtn.prependTo($li).button()}); 
                //$li.fadeIn(150); 
                $aMoreBtn.prependTo($li).button();

                $li.find('.ui-btn').hide().animate({
                    width: 'toggle'
                }, 250);
                // override row click
                $li.bind('tap', function(e) {
                    // if the triggering object is a button, fire it's tap event
                    if (e.target.className.indexOf('aCopyBtn') >= 0) $(e.target).trigger('tap');
                    e.gesture.stopDetect();
                    // remove any existing cancel buttons
                    $('.aMoreBtn').remove();
                    // remove the event
                });

                $('.aCopyBtn').tap(function(e) {
                    onswipe = false;
                    localStorage.setItem("isCopy", "true");
                    localStorage.setItem("lv_tagId", "copy");
                    Tiggr.navigateTo('OACameraExpense', {
                        transition: 'slide',
                        reverse: false
                    });

                });
            },
            tap: function() {
                // remove all buttons first
                $('.aDeleteBtn').remove();
                $('.aMoreBtn').remove();
                $('.aCopyBtn').remove();;
            },
            vclick: function() {
                // remove all buttons first
                $('.aDeleteBtn').remove();
                $('.aMoreBtn').remove();;
            },
        });

    }

    $("#favourites").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        favourites_beforeshow();
    });

    if (runBeforeShow) {
        favourites_beforeshow();
    } else {
        favourites_onLoad();
    }

}

$("#favourites").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    favourites_js();
});

mobilescreen_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilenavbar2_40': 'mobilescreen_mobilenavbar2_40',
        'mobilenavbaritem4_42': 'mobilescreen_mobilenavbaritem4_42',
        'mobilenavbaritem4_104': 'mobilescreen_mobilenavbaritem4_104',
        'mobilenavbaritem4_43': 'mobilescreen_mobilenavbaritem4_43',
        'mobileselectmenu1_106': 'mobilescreen_mobileselectmenu1_106',
        'mobileselectmenuitem_107': 'mobilescreen_mobileselectmenuitem_107',
        'myList': 'mobilescreen_myList',
        'mobilelistitem1_64': 'mobilescreen_mobilelistitem1_64',
        'mobilelistitembtn1_65': 'mobilescreen_mobilelistitembtn1_65',
        'list': 'mobilescreen_list',
        'gridcell_date': 'mobilescreen_gridcell_date',
        'date': 'mobilescreen_date',
        'mobilegridcell_84': 'mobilescreen_mobilegridcell_84',
        'type': 'mobilescreen_type',
        'mobilegridcell_102': 'mobilescreen_mobilegridcell_102',
        'reason': 'mobilescreen_reason',
        'mobilegridcell_103': 'mobilescreen_mobilegridcell_103',
        'amount': 'mobilescreen_amount',
        'mobilelabel1_105': 'mobilescreen_mobilelabel1_105'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'mobilescreen';

    /*
     * Nonvisual components
     */
    var datasources = [];

    restservice2 = new Appery.DataSource(ExpenseJSON_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("mobilescreen");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(restservice2);

    /*
     * Events and handlers
     */

    // Before Show
    mobilescreen_beforeshow = function() {
        Appery.CurrentScreen = "mobilescreen";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_33EC_onLoad = mobilescreen_onLoad = function() {
        screen_33EC_elementsExtraJS();
        Tiggzi('grid_test').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');

        localStorage.setItem('expenses', JSON.stringify(""));

        // TODO fire device events only if necessary (with JS logic)
        mobilescreen_deviceEvents();
        mobilescreen_windowEvents();
        screen_33EC_elementsEvents();
    }

    // screen window events
    screen_33EC_windowEvents = mobilescreen_windowEvents = function() {
        $('#mobilescreen').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });

    }

    // device events
    mobilescreen_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_33EC_elementsExtraJS = mobilescreen_elementsExtraJS = function() {
        // screen (mobilescreen) extra code

        /* mobileselectmenu1_106 */

        $("#mobilescreen_mobileselectmenu1_106").parent().find("a.ui-btn").attr("tabindex", "2");

        /* myList */

        listView = $("#mobilescreen_myList");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#mobilescreen_myList .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* mobilelistitem1_64 */

    }

    // screen elements handler
    screen_33EC_elementsEvents = mobilescreen_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#mobilescreen_mobileheader1 [name="mobilenavbaritem4_42"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    window.location = '#home';

                }
            },
        });
        $('#mobilescreen_mobileheader1 [name="mobilenavbaritem4_104"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    anotherRefresh();

                }
            },
        });
        $('#mobilescreen_mobileheader1 [name="mobilenavbaritem4_43"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    var valuesArray;
                    try {
                        valuesArray = JSON.parse(localStorage.getItem('expenses'));
                        alert(valuesArray);
                        if ({}.toString.call(valuesArray) !== "[object Array]") {
                            valuesArray = [];
                        }
                    } catch (err) {
                        valuesArray = [];
                    }
                    valuesArray.push({
                        "date": localStorage.getItem('lv_mobileDate'),
                        "type": localStorage.getItem('lv_mobileType'),
                        "reason": localStorage.getItem('lv_mobileReason'),
                        "amount": localStorage.getItem('lv_mobileAmount')
                    });
                    localStorage.setItem('expenses', JSON.stringify(valuesArray));

                }
            },
        });

    }

    $("#mobilescreen").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        mobilescreen_beforeshow();
    });

    if (runBeforeShow) {
        mobilescreen_beforeshow();
    } else {
        mobilescreen_onLoad();
    }

}

$("#mobilescreen").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    mobilescreen_js();
});

ebisMileageExpense_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobileDoneMiles': 'ebisMileageExpense_mobileDoneMiles',
        'mobilegrid_40': 'ebisMileageExpense_mobilegrid_40',
        'mobilegridcell_41': 'ebisMileageExpense_mobilegridcell_41',
        'mobilelabel1_61': 'ebisMileageExpense_mobilelabel1_61',
        'mobilegridcell_42': 'ebisMileageExpense_mobilegridcell_42',
        'mobileDate': 'ebisMileageExpense_mobileDate',
        'mobilegridcell_43': 'ebisMileageExpense_mobilegridcell_43',
        'mobilelabel_expenseType': 'ebisMileageExpense_mobilelabel_expenseType',
        'mobilegridcell_44': 'ebisMileageExpense_mobilegridcell_44',
        'mobileselectType': 'ebisMileageExpense_mobileselectType',
        'mobileselectmenuitem_84': 'ebisMileageExpense_mobileselectmenuitem_84',
        'mobilegridcell_45': 'ebisMileageExpense_mobilegridcell_45',
        'mobilelabel1_63': 'ebisMileageExpense_mobilelabel1_63',
        'mobilegridcell_46': 'ebisMileageExpense_mobilegridcell_46',
        'mobileReason': 'ebisMileageExpense_mobileReason',
        'mobilegridcell_47': 'ebisMileageExpense_mobilegridcell_47',
        'mobilelabel_85': 'ebisMileageExpense_mobilelabel_85',
        'mobilegridcell_48': 'ebisMileageExpense_mobilegridcell_48',
        'mobiletextinput_86': 'ebisMileageExpense_mobiletextinput_86',
        'mobilegridcell_49': 'ebisMileageExpense_mobilegridcell_49',
        'mobilelabel1_67': 'ebisMileageExpense_mobilelabel1_67',
        'mobilegridcell_50': 'ebisMileageExpense_mobilegridcell_50',
        'mobileFrom': 'ebisMileageExpense_mobileFrom',
        'mobilegridcell_51': 'ebisMileageExpense_mobilegridcell_51',
        'mobilelabel1_68': 'ebisMileageExpense_mobilelabel1_68',
        'mobilegridcell_52': 'ebisMileageExpense_mobilegridcell_52',
        'mobileTo': 'ebisMileageExpense_mobileTo',
        'mobilegridcell_53': 'ebisMileageExpense_mobilegridcell_53',
        'mobilelabel1_65': 'ebisMileageExpense_mobilelabel1_65',
        'mobilegridcell_54': 'ebisMileageExpense_mobilegridcell_54',
        'mobileRate': 'ebisMileageExpense_mobileRate',
        'mobilebutton_calc': 'ebisMileageExpense_mobilebutton_calc',
        'mobilegridcell_55': 'ebisMileageExpense_mobilegridcell_55',
        'mobilelabel1_64': 'ebisMileageExpense_mobilelabel1_64',
        'mobilegridcell_56': 'ebisMileageExpense_mobilegridcell_56',
        'mobileMiles': 'ebisMileageExpense_mobileMiles',
        'mobilegridcell_78': 'ebisMileageExpense_mobilegridcell_78',
        'mobilelabel1_66': 'ebisMileageExpense_mobilelabel1_66',
        'mobilegridcell_79': 'ebisMileageExpense_mobilegridcell_79',
        'mobileAmount': 'ebisMileageExpense_mobileAmount',
        'mobilegridcell_80': 'ebisMileageExpense_mobilegridcell_80',
        'mobilelabel_90': 'ebisMileageExpense_mobilelabel_90',
        'mobilegridcell_81': 'ebisMileageExpense_mobilegridcell_81',
        'mobileautocomplete': 'ebisMileageExpense_mobileautocomplete',
        'mobilegridcell_87': 'ebisMileageExpense_mobilegridcell_87',
        'mobilelabel1_69': 'ebisMileageExpense_mobilelabel1_69',
        'mobilegridcell_88': 'ebisMileageExpense_mobilegridcell_88',
        'mobileNotes': 'ebisMileageExpense_mobileNotes',
        'mobilecheckboxgroup_71': 'ebisMileageExpense_mobilecheckboxgroup_71',
        'mobilecheckbox_72': 'ebisMileageExpense_mobilecheckbox_72',
        'button_delete': 'ebisMileageExpense_button_delete',
        'button_fav': 'ebisMileageExpense_button_fav',
        'button_copy': 'ebisMileageExpense_button_copy'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'ebisMileageExpense';

    /*
     * Nonvisual components
     */
    var datasources = [];

    ExpenseJSONWrite_miles = new Appery.DataSource(ExpenseJSON_Write, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisMileageExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(ExpenseJSONWrite_miles);

    ExpenseJSONread_miles = new Appery.DataSource(ExpenseJSONRow, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisMileageExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['expenseForm[0]', 'expenseDate'],
            'ID': 'mobileDate',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseReason'],
            'ID': 'mobileReason',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseAmount'],
            'ID': 'mobileAmount',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseNotes'],
            'ID': 'mobileNotes',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseMilesClaim'],
            'ID': 'mobileMiles',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseMilesRate'],
            'ID': 'mobileRate',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseFrom'],
            'ID': 'mobileFrom',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseTo'],
            'ID': 'mobileTo',
            'ATTR': 'value'
        }],
        'requestMapping': [{
            'PATH': ['expense_ID'],
            'ID': '___local_storage___',
            'ATTR': '_tagId'
        }]
    });

    datasources.push(ExpenseJSONread_miles);

    FavJSONWrite_miles = new Appery.DataSource(FavJSON_Write, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("ebisMileageExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(FavJSONWrite_miles);

    /*
     * Events and handlers
     */

    // Before Show
    ebisMileageExpense_beforeshow = function() {
        Appery.CurrentScreen = "ebisMileageExpense";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_B0C4_onLoad = ebisMileageExpense_onLoad = function() {
        screen_B0C4_elementsExtraJS();
        Tiggzi('mobilecontainer1').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer1').css('background-size', 'cover');
        var fldMobileAmount = Tiggr('mobileAmount');
        fldMobileAmount.addClass('ui-disabled');
        localStorage.setItem("FavExpense", "no");
        //Tiggzi('button_delete').css('opacity','0.8');
        Tiggzi('button_delete').css('background-image', 'url("' + Tiggzi.getImagePath('delete_notes.png') + '")');
        Tiggzi('button_delete').css('background-repeat', 'no-repeat');
        Tiggzi('button_delete').css('background-size', 'cover');
        Tiggzi('button_copy').css('background-image', 'url("' + Tiggzi.getImagePath('copy.png') + '")');
        Tiggzi('button_copy').css('background-repeat', 'no-repeat');
        Tiggzi('button_copy').css('background-size', 'cover');
        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
        Tiggzi('button_fav').css('background-repeat', 'no-repeat');
        Tiggzi('button_fav').css('background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        ebisMileageExpense_deviceEvents();
        ebisMileageExpense_windowEvents();
        screen_B0C4_elementsEvents();
    }

    // screen window events
    screen_B0C4_windowEvents = ebisMileageExpense_windowEvents = function() {
        $('#ebisMileageExpense').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#ebisMileageExpense').bind({
            pageshow: function() {
                try {
                    ExpenseJSONread_miles.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
                Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
                Tiggzi('button_fav').css('background-repeat', 'no-repeat');
                Tiggzi('button_fav').css('background-size', 'cover');
                localStorage.setItem("FavExpense", "no");
                var customarray = new Array('an apple', 'alligator', 'elephant', 'pear', 'kingbird', 'kingbolt', 'kingcraft', 'kingcup', 'kingdom', 'kingfisher', 'kingpin');
                var custom2 = new Array('something', 'randomly', 'different');

                var obj = actb(Tiggzi("mobileautocomplete").get(0), customarray);
            },
        });

    }

    // device events
    ebisMileageExpense_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_B0C4_elementsExtraJS = ebisMileageExpense_elementsExtraJS = function() {
        // screen (ebisMileageExpense) extra code

        /* mobileselectType */

        $("#ebisMileageExpense_mobileselectType").parent().find("a.ui-btn").attr("tabindex", "3");

    }

    // screen elements handler
    screen_B0C4_elementsEvents = ebisMileageExpense_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#ebisMileageExpense_mobileheader1 [name="mobileDoneMiles"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    localStorage.setItem('lv_mobileImage', '');
                    MilesFormDone();
                    Appery.navigateTo('home', {
                        transition: 'fade',
                        reverse: false
                    });

                }
            },
        });

        $('#ebisMileageExpense_mobilecontainer1 [name="mobileRate"]').die().live({
            change: function() {
                miles();;
            },
        });
        $('#ebisMileageExpense_mobilecontainer1 [name="mobilebutton_calc"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('myStartPostcode', 'ebisMileageExpense_mobileFrom', 'text', '', this);
                    setVar_('myEndPostcode', 'ebisMileageExpense_mobileTo', 'text', '', this);
                    Tiggzi("mobileheader1").hide();
                    Tiggzi("mobileHeader").hide();
                    $(".ui-page").triggerHandler('updatelayout');
                    //showSpinner({text: 'Calculating Mileage...', textVisible:true, theme: 'b'} );
                    getMiles();;

                }
            },
        });

        $('#ebisMileageExpense_mobilecontainer1 [name="mobileMiles"]').die().live({
            change: function() {
                miles();
            },
        });

        $('#ebisMileageExpense_mobilefooter1 [name="button_fav"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    if (localStorage.getItem("FavExpense") == 'no') {
                        localStorage.setItem("FavExpense", "yes");
                        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('favblue.png') + '")');
                        Tiggzi('button_fav').css('background-repeat', 'no-repeat');
                    } else {
                        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
                        localStorage.setItem("FavExpense", "no");
                    };

                }
            },
        });

    }

    $("#ebisMileageExpense").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        ebisMileageExpense_beforeshow();
    });

    if (runBeforeShow) {
        ebisMileageExpense_beforeshow();
    } else {
        ebisMileageExpense_onLoad();
    }

}

$("#ebisMileageExpense").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    ebisMileageExpense_js();
});

settings_CacheLifetime_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'settings_CacheLifetime_mobilelabel_12',
        'ServerConnection': 'settings_CacheLifetime_ServerConnection',
        'mobileradiobutton_3': 'settings_CacheLifetime_mobileradiobutton_3',
        'mobilelabel_never': 'settings_CacheLifetime_mobilelabel_never',
        'mobileradiobutton_4': 'settings_CacheLifetime_mobileradiobutton_4',
        'mobilelabel_7days': 'settings_CacheLifetime_mobilelabel_7days',
        'mobileradiobutton_5': 'settings_CacheLifetime_mobileradiobutton_5',
        'mobilelabel_14days': 'settings_CacheLifetime_mobilelabel_14days',
        'mobileradiobutton_6': 'settings_CacheLifetime_mobileradiobutton_6',
        'mobilelabel_30days': 'settings_CacheLifetime_mobilelabel_30days',
        'mobileradiobutton_13': 'settings_CacheLifetime_mobileradiobutton_13',
        'mobilelabel_60days': 'settings_CacheLifetime_mobilelabel_60days',
        'mobileradiobutton_14': 'settings_CacheLifetime_mobileradiobutton_14',
        'mobilelabel_90days': 'settings_CacheLifetime_mobilelabel_90days'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings_CacheLifetime';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    settings_CacheLifetime_beforeshow = function() {
        Appery.CurrentScreen = "settings_CacheLifetime";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_8536_onLoad = settings_CacheLifetime_onLoad = function() {
        screen_8536_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        settings_CacheLifetime_deviceEvents();
        settings_CacheLifetime_windowEvents();
        screen_8536_elementsEvents();
    }

    // screen window events
    screen_8536_windowEvents = settings_CacheLifetime_windowEvents = function() {
        $('#settings_CacheLifetime').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#settings_CacheLifetime').bind({
            pageshow: function() {
                var data = localStorage.getItem("localSettings");
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.localSettings);
                var parsed = JSON.parse(JSONTypes);
                var $radios = $('input:radio[name=ServerConnection]');

                for (var i = 0; i < parsed.length; ++i)
                $radios.filter('[value="' + parsed[i].Cache + '"]').prop('checked', true).checkboxradio("refresh");
            },
        });

    }

    // device events
    settings_CacheLifetime_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_8536_elementsExtraJS = settings_CacheLifetime_elementsExtraJS = function() {
        // screen (settings_CacheLifetime) extra code

    }

    // screen elements handler
    screen_8536_elementsEvents = settings_CacheLifetime_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#settings_CacheLifetime_mobilecontainer [name="ServerConnection"]').die().live({
            change: function() {
                var choose = $('input:radio[name=ServerConnection]:checked').val();

                // update local settings and write local file
                setLocalSettings("Cache", choose);
            },
        });

    }

    $("#settings_CacheLifetime").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_CacheLifetime_beforeshow();
    });

    if (runBeforeShow) {
        settings_CacheLifetime_beforeshow();
    } else {
        settings_CacheLifetime_onLoad();
    }

}

$("#settings_CacheLifetime").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_CacheLifetime_js();
});

feedback_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'feedback_mobilelabel_12',
        'mobiletextarea_15': 'feedback_mobiletextarea_15',
        'mobileName': 'feedback_mobileName',
        'mobileEmail': 'feedback_mobileEmail',
        'mobilegrid_17': 'feedback_mobilegrid_17',
        'mobilegridcell_18': 'feedback_mobilegridcell_18',
        'mobilegridcell_19': 'feedback_mobilegridcell_19',
        'mobilebutton_16': 'feedback_mobilebutton_16',
        'mobilegridcell_22': 'feedback_mobilegridcell_22'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'feedback';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    feedback_beforeshow = function() {
        Appery.CurrentScreen = "feedback";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_7448_onLoad = feedback_onLoad = function() {
        screen_7448_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        feedback_deviceEvents();
        feedback_windowEvents();
        screen_7448_elementsEvents();
    }

    // screen window events
    screen_7448_windowEvents = feedback_windowEvents = function() {
        $('#feedback').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });

    }

    // device events
    feedback_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_7448_elementsExtraJS = feedback_elementsExtraJS = function() {
        // screen (feedback) extra code

    }

    // screen elements handler
    screen_7448_elementsEvents = feedback_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#feedback_mobilecontainer [name="mobilebutton_16"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    var link = 'mailto:goodlandjohn@gmail.com?subject=OpenMobile Expenses Feedback/Report Problem ' + '&body=' + Tiggzi("mobiletextarea_15").val() + "%0D%0A" + 'From:' + Tiggzi("mobileName").val() + +' Email: ' + Tiggzi("mobileEmail").val();
                    window.location.href = link;

                    ;
                    Appery.navigateTo('home', {
                        transition: 'fade',
                        reverse: false
                    });

                }
            },
        });

    }

    $("#feedback").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        feedback_beforeshow();
    });

    if (runBeforeShow) {
        feedback_beforeshow();
    } else {
        feedback_onLoad();
    }

}

$("#feedback").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    feedback_js();
});

addClaimGroup_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'ListGroup': 'addClaimGroup_ListGroup',
        'mobilelistitem_23': 'addClaimGroup_mobilelistitem_23',
        'mobilelistitembutton_24': 'addClaimGroup_mobilelistitembutton_24',
        'GridGroupData': 'addClaimGroup_GridGroupData',
        'mobilegridcell_38': 'addClaimGroup_mobilegridcell_38',
        'labelGroup': 'addClaimGroup_labelGroup',
        'mobilegridcell_40': 'addClaimGroup_mobilegridcell_40',
        'labelDesc': 'addClaimGroup_labelDesc',
        'mobilegrid_30': 'addClaimGroup_mobilegrid_30',
        'mobilegridcell_31': 'addClaimGroup_mobilegridcell_31',
        'mobilegridcell_32': 'addClaimGroup_mobilegridcell_32',
        'mobilegridcell_33': 'addClaimGroup_mobilegridcell_33',
        'mobilegridcell_34': 'addClaimGroup_mobilegridcell_34'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'addClaimGroup';

    /*
     * Nonvisual components
     */
    var datasources = [];

    ReadLocalStorage_groups = new Appery.DataSource(Groups_Read_LocalStorage, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("addClaimGroup");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['eGroup'],
            'ID': 'mobilelistitem_23',
            'SET': [{
                'PATH': ['cGroup'],
                'ID': 'labelGroup',
                'ATTR': '@'
            }, {
                'PATH': ['cDescription'],
                'ID': 'labelDesc',
                'ATTR': '@'
            }]
        }],
        'requestMapping': []
    });

    datasources.push(ReadLocalStorage_groups);

    /*
     * Events and handlers
     */

    // Before Show
    addClaimGroup_beforeshow = function() {
        Appery.CurrentScreen = "addClaimGroup";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_9C2F_onLoad = addClaimGroup_onLoad = function() {
        screen_9C2F_elementsExtraJS();
        Tiggzi('mobilecontainer2').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer2').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer2').css('background-size', 'cover');
        Tiggzi('mobilecontainer2').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer2').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer2').css('-o-background-size', 'cover');;
        try {
            ReadLocalStorage_groups.execute({})
        } catch (ex) {
            console.log(ex.name + '  ' + ex.message);
            hideSpinner();
        };

        // TODO fire device events only if necessary (with JS logic)
        addClaimGroup_deviceEvents();
        addClaimGroup_windowEvents();
        screen_9C2F_elementsEvents();
    }

    // screen window events
    screen_9C2F_windowEvents = addClaimGroup_windowEvents = function() {
        $('#addClaimGroup').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#addClaimGroup').bind({
            pageshow: function() {
                try {
                    ReadLocalStorage_groups.execute({})
                } catch (ex) {
                    console.log(ex.name + '  ' + ex.message);
                    hideSpinner();
                };
            },
        });

    }

    // device events
    addClaimGroup_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_9C2F_elementsExtraJS = addClaimGroup_elementsExtraJS = function() {
        // screen (addClaimGroup) extra code

        /* ListGroup */

        listView = $("#addClaimGroup_ListGroup");
        theme = listView.attr("data-theme");
        if (typeof theme !== 'undefined') {
            var themeClass = "ui-btn-up-" + theme;
            listItem = $("#addClaimGroup_ListGroup .ui-li-static");
            $.each(listItem, function(index, value) {
                $(this).addClass(themeClass);
            });
        }

        /* mobilelistitem_23 */

    }

    // screen elements handler
    screen_9C2F_elementsEvents = addClaimGroup_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#addClaimGroup_mobilecontainer2 [name="ListGroup"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    Appery.navigateTo('OACameraExpense', {
                        transition: 'slide',
                        reverse: false
                    });

                }
            },
        });
        $('#addClaimGroup_mobilecontainer2 [name="mobilelistitem_23"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('sessionGroup', 'addClaimGroup_labelGroup', 'text', '', this);
                    var selectedValue = localStorage.getItem("sessionGroup");
                    var data = localStorage.getItem("ResultFields");
                    var FieldList = [];
                    var fldArray = new Array;
                    var parsedFields = JSON.parse(data);
                    var JSONFields = JSON.stringify(parsedFields.eFields);
                    var parsed = JSON.parse(JSONFields);
                    for (var i = 0; i < parsed.length; ++i)

                    if (selectedValue == parsed[i].cGroup) {
                        var item = {
                            "Field": parsed[i].cFieldName,
                            "Label": parsed[i].cFieldLabel,
                            "DataType": parsed[i].cFieldDataType,
                            "Mandatory": parsed[i].cFieldMandatory,
                            "Hidden": parsed[i].cFieldHidden
                        };
                        FieldList.push(item);
                        fldArray[fldArray.length] = new fldItem(parsed[i].cFieldName, parsed[i].cFieldLabel, parsed[i].cFieldDataType, parsed[i].cFieldMandatory, parsed[i].cFieldHidden);
                        console.log('Found Field data pushing to JSONTypes storage.');
                    };

/*
fldArray[fldArray.length] = new fldItem('cExpGroup','Group','text','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpType','Type','select','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpDate','Date','text','M','S'); 
fldArray[fldArray.length] = new fldItem('cExpReason','Reason','text','M','S'); 
fldArray[fldArray.length] = new fldItem('cExpAmount','Amount','decimal','M','S'); 
fldArray[fldArray.length] = new fldItem('cExpCharge','Recharge Customer','text','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpPurpose','Purpose','text','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpOOP','OOP Reason','textarea','M','H'); 
fldArray[fldArray.length] = new fldItem('cExpPayee','Payee','text','O','H'); 
fldArray[fldArray.length] = new fldItem('cExpNoPeople','No. People','text','O','H'); 
fldArray[fldArray.length] = new fldItem('cExpNoNights','No. Nights','text','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpEveMeal','Includes Evening Meal','text','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpBreak','Includes Breakfast','text','O','S'); 
fldArray[fldArray.length] = new fldItem('cExpLunch','Includes Lunch','text','O','S'); 
*/
                    ;

                }
            },
        });

    }

    $("#addClaimGroup").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        addClaimGroup_beforeshow();
    });

    if (runBeforeShow) {
        addClaimGroup_beforeshow();
    } else {
        addClaimGroup_onLoad();
    }

}

$("#addClaimGroup").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    addClaimGroup_js();
});

optionstemplate1_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobileselectmenu1_15': 'optionstemplate1_mobileselectmenu1_15',
        'mobileselectmenuitem_16': 'optionstemplate1_mobileselectmenuitem_16'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'optionstemplate1';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    optionstemplate1_beforeshow = function() {
        Appery.CurrentScreen = "optionstemplate1";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_B28C_onLoad = optionstemplate1_onLoad = function() {
        screen_B28C_elementsExtraJS();

        // TODO fire device events only if necessary (with JS logic)
        optionstemplate1_deviceEvents();
        optionstemplate1_windowEvents();
        screen_B28C_elementsEvents();
    }

    // screen window events
    screen_B28C_windowEvents = optionstemplate1_windowEvents = function() {
        $('#optionstemplate1').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });

    }

    // device events
    optionstemplate1_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_B28C_elementsExtraJS = optionstemplate1_elementsExtraJS = function() {
        // screen (optionstemplate1) extra code

        /* mobileselectmenu1_15 */

        $("#optionstemplate1_mobileselectmenu1_15").parent().find("a.ui-btn").attr("tabindex", "2");

    }

    // screen elements handler
    screen_B28C_elementsEvents = optionstemplate1_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

    }

    $("#optionstemplate1").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        optionstemplate1_beforeshow();
    });

    if (runBeforeShow) {
        optionstemplate1_beforeshow();
    } else {
        optionstemplate1_onLoad();
    }

}

$("#optionstemplate1").die("dialoginit").live("dialoginit", function(event, ui) {
    Appery.processSelectMenu($(this));
    optionstemplate1_js();
});

$("#optionstemplate1").die("dialogcreate").live("dialogcreate", function(event, ui) {
    //Most components initializations are done on "pagecreate" event. This event must be triggered for dialogs too.
    $(this).trigger("pagecreate");
});

settings_ConnectionServer_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'settings_ConnectionServer_mobilelabel_12',
        'ServerConnect': 'settings_ConnectionServer_ServerConnect',
        'mobileradiobutton_3': 'settings_ConnectionServer_mobileradiobutton_3',
        'mobilelabel_7': 'settings_ConnectionServer_mobilelabel_7',
        'mobileradiobutton_4': 'settings_ConnectionServer_mobileradiobutton_4',
        'mobilelabel_9': 'settings_ConnectionServer_mobilelabel_9',
        'mobileradiobutton_5': 'settings_ConnectionServer_mobileradiobutton_5',
        'mobilelabel_10': 'settings_ConnectionServer_mobilelabel_10',
        'mobileradiobutton_6': 'settings_ConnectionServer_mobileradiobutton_6',
        'mobilelabel_11': 'settings_ConnectionServer_mobilelabel_11'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings_ConnectionServer';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    settings_ConnectionServer_beforeshow = function() {
        Appery.CurrentScreen = "settings_ConnectionServer";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_AF9F_onLoad = settings_ConnectionServer_onLoad = function() {
        screen_AF9F_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        settings_ConnectionServer_deviceEvents();
        settings_ConnectionServer_windowEvents();
        screen_AF9F_elementsEvents();
    }

    // screen window events
    screen_AF9F_windowEvents = settings_ConnectionServer_windowEvents = function() {
        $('#settings_ConnectionServer').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#settings_ConnectionServer').bind({
            pageshow: function() { // get sync value and display
                var data = localStorage.getItem("localSettings");
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.localSettings);
                var parsed = JSON.parse(JSONTypes);
                var $radios = $('input:radio[name=ServerConnect]');

                for (var i = 0; i < parsed.length; ++i)

                $radios.filter('[value="' + parsed[i].ConnectServer + '"]').prop('checked', true).checkboxradio("refresh");;
            },
        });

    }

    // device events
    settings_ConnectionServer_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_AF9F_elementsExtraJS = settings_ConnectionServer_elementsExtraJS = function() {
        // screen (settings_ConnectionServer) extra code

    }

    // screen elements handler
    screen_AF9F_elementsEvents = settings_ConnectionServer_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#settings_ConnectionServer_mobilecontainer [name="ServerConnect"]').die().live({
            change: function() {
                var choose = $('input:radio[name=ServerConnect]:checked').val();

                // update local settings and write local file
                setLocalSettings("ConnectServer", choose);
            },
        });

    }

    $("#settings_ConnectionServer").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_ConnectionServer_beforeshow();
    });

    if (runBeforeShow) {
        settings_ConnectionServer_beforeshow();
    } else {
        settings_ConnectionServer_onLoad();
    }

}

$("#settings_ConnectionServer").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_ConnectionServer_js();
});

settings_Sync_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilelabel_12': 'settings_Sync_mobilelabel_12',
        'DataSync': 'settings_Sync_DataSync',
        'mobileradiobutton_3': 'settings_Sync_mobileradiobutton_3',
        'mobilelabel_7': 'settings_Sync_mobilelabel_7',
        'mobileradiobutton_4': 'settings_Sync_mobileradiobutton_4',
        'mobilelabel_9': 'settings_Sync_mobilelabel_9',
        'mobileradiobutton_6': 'settings_Sync_mobileradiobutton_6',
        'mobilelabel_11': 'settings_Sync_mobilelabel_11',
        'mobileradiobutton_39': 'settings_Sync_mobileradiobutton_39',
        'mobilelabel_40': 'settings_Sync_mobilelabel_40',
        'mobilebutton_38': 'settings_Sync_mobilebutton_38'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'settings_Sync';

    /*
     * Nonvisual components
     */
    var datasources = [];

    getGroups = new Appery.DataSource(ebisGroups_getGroups_JSDO, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings_Sync");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(getGroups);

    getGroupsRead = new Appery.DataSource(ebisGroups_getGroups_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings_Sync");
        },
        'onSuccess': function(data) {
            toastDelay = 3000; //message show time
            toast('Synchronized');
            $('.SpinnerAdd').remove();
            $('.Backdrop').remove();
            localStorage.setItem('ResultGroups', JSON.stringify(data));

            ;
        },
        'onError': function(jqXHR, textStatus, errorThrown) {
            toastDelay = 5000; //message show time
            toast('Connection timeout, please try again later');
            $('.SpinnerAdd').remove();
            $('.Backdrop').remove();;
        },
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(getGroupsRead);

    getTypes = new Appery.DataSource(ebisTypes_getTypes_JSDO, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings_Sync");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(getTypes);

    getTypesRead = new Appery.DataSource(ebisTypes_getTypes_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings_Sync");
        },
        'onSuccess': function(data) {
            localStorage.setItem('ResultTypes', JSON.stringify(data));
        },
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(getTypesRead);

    getFields = new Appery.DataSource(ebisFields_getFields_JSDO, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings_Sync");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(getFields);

    getFieldsRead = new Appery.DataSource(ebisFields_getFields_Read, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("settings_Sync");
        },
        'onSuccess': function(data) {
            localStorage.setItem('ResultFields', JSON.stringify(data));
        },
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(getFieldsRead);

    /*
     * Events and handlers
     */

    // Before Show
    settings_Sync_beforeshow = function() {
        Appery.CurrentScreen = "settings_Sync";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_A8B2_onLoad = settings_Sync_onLoad = function() {
        screen_A8B2_elementsExtraJS();
        Tiggzi('mobilecontainer').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer').css('background-image', 'no-repeat center center fixed');
        Tiggzi('mobilecontainer').css('background-size', 'cover');
        Tiggzi('mobilecontainer').css('-webkit-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-moz-background-size', 'cover');
        Tiggzi('mobilecontainer').css('-o-background-size', 'cover');

        // TODO fire device events only if necessary (with JS logic)
        settings_Sync_deviceEvents();
        settings_Sync_windowEvents();
        screen_A8B2_elementsEvents();
    }

    // screen window events
    screen_A8B2_windowEvents = settings_Sync_windowEvents = function() {
        $('#settings_Sync').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#settings_Sync').bind({
            pageshow: function() {
                var data = localStorage.getItem("localSettings");
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.localSettings);
                var parsed = JSON.parse(JSONTypes);
                var $radios = $('input:radio[name=DataSync]');

                for (var i = 0; i < parsed.length; ++i)
                $radios.filter('[value="' + parsed[i].Sync + '"]').prop('checked', true).checkboxradio("refresh");

                ;
            },
        });

    }

    // device events
    settings_Sync_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_A8B2_elementsExtraJS = settings_Sync_elementsExtraJS = function() {
        // screen (settings_Sync) extra code

    }

    // screen elements handler
    screen_A8B2_elementsEvents = settings_Sync_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#settings_Sync_mobilecontainer [name="DataSync"]').die().live({
            change: function() {
                var choose = $('input:radio[name=DataSync]:checked').val();

                // update local settings and write local file
                setLocalSettings("Sync", choose);
            },
        });

        $('#settings_Sync_mobilecontainer [name="mobilebutton_38"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
/* lots to do here 
But here is a solution - save array into localStorage 

Add Succes event for your RestService and action Run Custom JS 

localStorage.setItem('resultArray', JSON.stringify(data));

*/
                    toastDelay = 1000; //message show time
                    toast("Establishing Connection");
                    var settings;
                    var settingsURL;
                    var catalogURL;
                    var cMsg = "ok";
                    showSpinner({
                        text: 'Please Wait...',
                        textVisible: true,
                        theme: 'b'
                    });
                    try { /* CHANGE THIS TO POINT TO YOUR SETTINGS SERVICE */
                        settings = ebisGroups_getGroups_Settings;
                        settingsURL = localStorage.getItem("ServerIPAddress") + settings.serviceURL;
                        catalogURL = localStorage.getItem("ServerIPAddress") + settings.catalogURL;

                        pdsession = new progress.data.Session();
                        var loginResult = pdsession.login(settingsURL, "", "");
                        if (loginResult != progress.data.Session.LOGIN_SUCCESS) {
                            console.log('ERROR: Login failed with code: ' + loginResult);
                            switch (loginResult) {
                            case progress.data.Session.LOGIN_AUTHENTICATION_FAILURE:
                                cMsg = 'Invalid user-id or password';
                                break;
                            case progress.data.Session.LOGIN_GENERAL_FAILURE:
                            default:
                                cMsg = 'Service is unavailable';
                                break;
                            }
                        }
                    } catch (e) {
                        cMsg = "Failed to log in";
                        console.log(e.stack);
                    }
                    if (cMsg != "ok") {
                        toastDelay = 4000; //message show time
                        toast(cMsg);
                        return;
                    }
                    pdsession.addCatalog(catalogURL);;
                    try {
                        getGroups.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    try {
                        getGroupsRead.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    var settings;
                    var settingsURL;
                    var catalogURL;
                    var cMsg = "ok";
                    showSpinner({
                        text: 'Please Wait...',
                        textVisible: true,
                        theme: 'b'
                    });
                    try { /* CHANGE THIS TO POINT TO YOUR SETTINGS SERVICE */
                        settings = ebisTypes_getTypes_Settings;
                        settingsURL = localStorage.getItem("ServerIPAddress") + settings.serviceURL;
                        catalogURL = localStorage.getItem("ServerIPAddress") + settings.catalogURL;
                        pdsession = new progress.data.Session();
                        var loginResult = pdsession.login(settingsURL, "", "");
                        if (loginResult != progress.data.Session.LOGIN_SUCCESS) {
                            console.log('ERROR: Login failed with code: ' + loginResult);
                            switch (loginResult) {
                            case progress.data.Session.LOGIN_AUTHENTICATION_FAILURE:
                                cMsg = 'Invalid user-id or password';
                                break;
                            case progress.data.Session.LOGIN_GENERAL_FAILURE:
                            default:
                                cMsg = 'Service is unavailable';
                                break;
                            }
                        }
                    } catch (e) {
                        cMsg = "Failed to log in";
                        console.log(e.stack);
                    }
                    if (cMsg != "ok") {
                        toastDelay = 4000; //message show time
                        toast(cMsg);
                        return;
                    }
                    pdsession.addCatalog(catalogURL);
                    try {
                        getTypes.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    try {
                        getTypesRead.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    var settings;
                    var settingsURL;
                    var catalogURL;
                    var cMsg = "ok";
                    showSpinner({
                        text: 'Please Wait...',
                        textVisible: true,
                        theme: 'b'
                    });
                    try { /* CHANGE THIS TO POINT TO YOUR SETTINGS SERVICE */
                        settings = ebisFields_getFields_Settings;
                        settingsURL = localStorage.getItem("ServerIPAddress") + settings.serviceURL;
                        catalogURL = localStorage.getItem("ServerIPAddress") + settings.catalogURL;

                        pdsession = new progress.data.Session();
                        var loginResult = pdsession.login(settingsURL, "", "");
                        if (loginResult != progress.data.Session.LOGIN_SUCCESS) {
                            console.log('ERROR: Login failed with code: ' + loginResult);
                            switch (loginResult) {
                            case progress.data.Session.LOGIN_AUTHENTICATION_FAILURE:
                                cMsg = 'Invalid user-id or password';
                                break;
                            case progress.data.Session.LOGIN_GENERAL_FAILURE:
                            default:
                                cMsg = 'Service is unavailable';
                                break;
                            }
                        }
                    } catch (e) {
                        cMsg = "Failed to log in";
                        console.log(e.stack);
                    }
                    if (cMsg != "ok") {
                        toastDelay = 4000; //message show time
                        toast(cMsg);
                        return;
                    }
                    pdsession.addCatalog(catalogURL);
                    try {
                        getFields.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };
                    try {
                        getFieldsRead.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };

                }
            },
        });

    }

    $("#settings_Sync").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        settings_Sync_beforeshow();
    });

    if (runBeforeShow) {
        settings_Sync_beforeshow();
    } else {
        settings_Sync_onLoad();
    }

}

$("#settings_Sync").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    settings_Sync_js();
});

OACameraExpense_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobileDoneReceipt': 'OACameraExpense_mobileDoneReceipt',
        'mainTable': 'OACameraExpense_mainTable',
        'mobilegridcell_84': 'OACameraExpense_mobilegridcell_84',
        'cExpGroup_Lab': 'OACameraExpense_cExpGroup_Lab',
        'mobilegridcell_85': 'OACameraExpense_mobilegridcell_85',
        'cExpGroup': 'OACameraExpense_cExpGroup',
        'mobilegridcell_86': 'OACameraExpense_mobilegridcell_86',
        'cExpType_Lab': 'OACameraExpense_cExpType_Lab',
        'mobilegridcell_87': 'OACameraExpense_mobilegridcell_87',
        'cExpType': 'OACameraExpense_cExpType',
        'mobileselectmenuitem1': 'OACameraExpense_mobileselectmenuitem1',
        'mobilegridcell_92': 'OACameraExpense_mobilegridcell_92',
        'cExpDate_Lab': 'OACameraExpense_cExpDate_Lab',
        'mobilegridcell_93': 'OACameraExpense_mobilegridcell_93',
        'cExpDate': 'OACameraExpense_cExpDate',
        'mobilegridcell_94': 'OACameraExpense_mobilegridcell_94',
        'cExpReason_Lab': 'OACameraExpense_cExpReason_Lab',
        'mobilegridcell_95': 'OACameraExpense_mobilegridcell_95',
        'cExpReason': 'OACameraExpense_cExpReason',
        'mobilegridcell_98': 'OACameraExpense_mobilegridcell_98',
        'cExpAmount_Lab': 'OACameraExpense_cExpAmount_Lab',
        'mobilegridcell_99': 'OACameraExpense_mobilegridcell_99',
        'cExpAmount': 'OACameraExpense_cExpAmount',
        'mobilegridcell_105': 'OACameraExpense_mobilegridcell_105',
        'cExpCharge_Lab': 'OACameraExpense_cExpCharge_Lab',
        'mobilegridcell_106': 'OACameraExpense_mobilegridcell_106',
        'cExpCharge': 'OACameraExpense_cExpCharge',
        'mobilegridcell_107': 'OACameraExpense_mobilegridcell_107',
        'cExpPurpose_Lab': 'OACameraExpense_cExpPurpose_Lab',
        'mobilegridcell_108': 'OACameraExpense_mobilegridcell_108',
        'cExpPurpose': 'OACameraExpense_cExpPurpose',
        'mobilegridcell_109': 'OACameraExpense_mobilegridcell_109',
        'cExpOOP_Lab': 'OACameraExpense_cExpOOP_Lab',
        'mobilegridcell_110': 'OACameraExpense_mobilegridcell_110',
        'cExpOOP': 'OACameraExpense_cExpOOP',
        'mobilegridcell_111': 'OACameraExpense_mobilegridcell_111',
        'cExpPayee_Lab': 'OACameraExpense_cExpPayee_Lab',
        'mobilegridcell_112': 'OACameraExpense_mobilegridcell_112',
        'cExpPayee': 'OACameraExpense_cExpPayee',
        'mobilegridcell_113': 'OACameraExpense_mobilegridcell_113',
        'cExpNoPeople_Lab': 'OACameraExpense_cExpNoPeople_Lab',
        'mobilegridcell_114': 'OACameraExpense_mobilegridcell_114',
        'cExpNoPeople': 'OACameraExpense_cExpNoPeople',
        'mobilegridcell_130': 'OACameraExpense_mobilegridcell_130',
        'cExpNoNights_Lab': 'OACameraExpense_cExpNoNights_Lab',
        'mobilegridcell_131': 'OACameraExpense_mobilegridcell_131',
        'cExpNoNights': 'OACameraExpense_cExpNoNights',
        'mobilegridcell_132': 'OACameraExpense_mobilegridcell_132',
        'cExpEveMeal_Lab': 'OACameraExpense_cExpEveMeal_Lab',
        'mobilegridcell_133': 'OACameraExpense_mobilegridcell_133',
        'cExpEveMeal': 'OACameraExpense_cExpEveMeal',
        'mobilegridcell_134': 'OACameraExpense_mobilegridcell_134',
        'cExpBreak_Lab': 'OACameraExpense_cExpBreak_Lab',
        'mobilegridcell_135': 'OACameraExpense_mobilegridcell_135',
        'cExpBreak': 'OACameraExpense_cExpBreak',
        'mobilegridcell_136': 'OACameraExpense_mobilegridcell_136',
        'cExpLunch_Lab': 'OACameraExpense_cExpLunch_Lab',
        'mobilegridcell_137': 'OACameraExpense_mobilegridcell_137',
        'cExpLunch': 'OACameraExpense_cExpLunch',
        'mobilegridcell_148': 'OACameraExpense_mobilegridcell_148',
        'cExpVisit_Lab': 'OACameraExpense_cExpVisit_Lab',
        'mobilegridcell_149': 'OACameraExpense_mobilegridcell_149',
        'cExpVisit': 'OACameraExpense_cExpVisit',
        'mobilegridcell_150': 'OACameraExpense_mobilegridcell_150',
        'cExpFrom_Lab': 'OACameraExpense_cExpFrom_Lab',
        'mobilegridcell_151': 'OACameraExpense_mobilegridcell_151',
        'cExpFrom': 'OACameraExpense_cExpFrom',
        'mobilegridcell_152': 'OACameraExpense_mobilegridcell_152',
        'cExpTo_Lab': 'OACameraExpense_cExpTo_Lab',
        'mobilegridcell_153': 'OACameraExpense_mobilegridcell_153',
        'cExpTo': 'OACameraExpense_cExpTo',
        'mobilegridcell_154': 'OACameraExpense_mobilegridcell_154',
        'cExpRound_Lab': 'OACameraExpense_cExpRound_Lab',
        'mobilegridcell_155': 'OACameraExpense_mobilegridcell_155',
        'cExpRound': 'OACameraExpense_cExpRound',
        'mobilegridcell_156': 'OACameraExpense_mobilegridcell_156',
        'cExpMap_Lab': 'OACameraExpense_cExpMap_Lab',
        'mobilegridcell_157': 'OACameraExpense_mobilegridcell_157',
        'cExpMap': 'OACameraExpense_cExpMap',
        'mobilebutton_190': 'OACameraExpense_mobilebutton_190',
        'mobilegridcell_158': 'OACameraExpense_mobilegridcell_158',
        'cExpCalcMiles_Lab': 'OACameraExpense_cExpCalcMiles_Lab',
        'mobilegridcell_159': 'OACameraExpense_mobilegridcell_159',
        'cExpCalcMiles': 'OACameraExpense_cExpCalcMiles',
        'mobilegridcell_160': 'OACameraExpense_mobilegridcell_160',
        'cExpClaimMiles_Lab': 'OACameraExpense_cExpClaimMiles_Lab',
        'mobilegridcell_161': 'OACameraExpense_mobilegridcell_161',
        'cExpClaimMiles': 'OACameraExpense_cExpClaimMiles',
        'mobilegridcell_162': 'OACameraExpense_mobilegridcell_162',
        'cExpVehicle_Lab': 'OACameraExpense_cExpVehicle_Lab',
        'mobilegridcell_163': 'OACameraExpense_mobilegridcell_163',
        'cExpVehicle': 'OACameraExpense_cExpVehicle',
        'mobilegridcell_164': 'OACameraExpense_mobilegridcell_164',
        'cExpYTDMiles_Lab': 'OACameraExpense_cExpYTDMiles_Lab',
        'mobilegridcell_165': 'OACameraExpense_mobilegridcell_165',
        'cExpYTDMiles': 'OACameraExpense_cExpYTDMiles',
        'mobilegridcell_166': 'OACameraExpense_mobilegridcell_166',
        'cExpPeople_Lab': 'OACameraExpense_cExpPeople_Lab',
        'mobilegridcell_167': 'OACameraExpense_mobilegridcell_167',
        'cExpPeople': 'OACameraExpense_cExpPeople',
        'mobilegridcell_168': 'OACameraExpense_mobilegridcell_168',
        'mobilegridcell_169': 'OACameraExpense_mobilegridcell_169',
        'mobilegridcell_170': 'OACameraExpense_mobilegridcell_170',
        'mobilegridcell_171': 'OACameraExpense_mobilegridcell_171',
        'mobileImage': 'OACameraExpense_mobileImage',
        'button_delete': 'OACameraExpense_button_delete',
        'button_fav': 'OACameraExpense_button_fav',
        'button_copy': 'OACameraExpense_button_copy',
        'button_camera': 'OACameraExpense_button_camera'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'OACameraExpense';

    /*
     * Nonvisual components
     */
    var datasources = [];

    mobilecamera1 = new Appery.DataSource(CameraService, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("OACameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['imageDataBase64'],
            'ID': 'mobileImage',
            'ATTR': 'src'
        }, {
            'PATH': ['imageDataBase64'],
            'ID': '___local_storage___',
            'ATTR': 'lv_mobileImage'
        }],
        'requestMapping': [{
            'PATH': ['quality'],
            'ATTR': '75'
        }, {
            'PATH': ['destinationType'],
            'ATTR': 'Data URL'
        }, {
            'PATH': ['sourcetype'],
            'ATTR': 'Camera',
            'TRANSFORMATION': function(value) {
                return localStorage.getItem('PhotoType');
            }
        }, {
            'PATH': ['allowedit'],
            'ATTR': 'true'
        }, {
            'PATH': ['encodingType'],
            'ATTR': 'JPEG'
        }, {
            'PATH': ['targetWidth'],
            'ATTR': '800'
        }, {
            'PATH': ['targetHeight'],
            'ATTR': '600'
        }]
    });

    datasources.push(mobilecamera1);

    ExpenseJSONWrite = new Appery.DataSource(ExpenseJSON_Write, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("OACameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(ExpenseJSONWrite);

    ExpenseJSONread = new Appery.DataSource(ExpenseJSONRow, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("OACameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['expenseForm[0]', 'expenseMilesClaim'],
            'ID': 'cExpClaimMiles',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseMilesRate'],
            'ID': 'cExpCalcMiles',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseFrom'],
            'ID': 'cExpFrom',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseTo'],
            'ID': 'cExpTo',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseType'],
            'ID': 'cExpType',
            'ATTR': 'value',
            'TRANSFORMATION': function(value, element) {

                if (value == "") {
                    //Appery('cExpType').selectmenu('refresh', true);
                    //  alert(localStorlocalStorage.getItem("firstType")age.getItem("firstType");

                    return localStorage.getItem("firstType");
                }

            }
        }, {
            'PATH': ['expenseForm[0]', 'expenseReason'],
            'ID': 'cExpReason',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseDate'],
            'ID': 'cExpDate',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseAmount'],
            'ID': 'cExpAmount',
            'ATTR': 'value',
            'TRANSFORMATION': function(value, element) {
                $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                if (value > 25) {
                    var outsdo = Tiggzi('mobileAmount').parent(); //get Div of Jobs Pic
                    $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                    var StyleTask = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '10px 10px 1px #000',
                        'font-weight': 'bold',
                        'font-size': '80%',
                        'margin-left': '50px',
                        'margin-top': '-28px'
                    };
                    var StyleJob = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '8px 8px 1px #000',
                        'font-weight': 'bold',
                        'margin-left': '65px',
                        'margin-top': '-48px'
                    };
                    $('<p id="outofpolicy">').appendTo(outsdo).text("Out of Policy").css(StyleTask);
                }

            }
        }, {
            'PATH': ['expenseForm[0]', 'expenseNotes'],
            'ID': 'cExpOOP',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseImage'],
            'ID': 'mobileImage',
            'ATTR': 'src',
            'TRANSFORMATION': function(value, element) {
                if (value == "") {
                    var path = Tiggzi.getImagePath('UIButtonBarCamera4.jpg');
                    return path;
                }
            }
        }, {
            'PATH': ['expenseForm[0]', 'expenseCharge'],
            'ID': 'cExpCharge',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expensePurpose'],
            'ID': 'cExpPurpose',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expensePayee'],
            'ID': 'cExpPayee',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseNoPeople'],
            'ID': 'cExpNoPeople',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseNoNights'],
            'ID': 'cExpNoNights',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseEveMeal'],
            'ID': 'cExpEveMeal',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseBreak'],
            'ID': 'cExpBreak',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseLunch'],
            'ID': 'cExpLunch',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseVisit'],
            'ID': 'cExpVisit',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseRound'],
            'ID': 'cExpRound',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseVehicle'],
            'ID': 'cExpVehicle',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expenseYTDMiles'],
            'ID': 'cExpYTDMiles',
            'ATTR': 'value'
        }, {
            'PATH': ['expenseForm[0]', 'expensePeople'],
            'ID': 'cExpPeople',
            'ATTR': 'value'
        }],
        'requestMapping': [{
            'PATH': ['expense_ID'],
            'ID': '___local_storage___',
            'ATTR': '_tagId'
        }]
    });

    datasources.push(ExpenseJSONread);

    FavJSONWrite = new Appery.DataSource(FavJSON_Write, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("OACameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [],
        'requestMapping': []
    });

    datasources.push(FavJSONWrite);

    FavJSONread = new Appery.DataSource(FavJSON_Row, {
        'onComplete': function(jqXHR, textStatus) {

            $t.refreshScreenFormElements("OACameraExpense");
        },
        'onSuccess': function(data) {},
        'onError': function(jqXHR, textStatus, errorThrown) {},
        'responseMapping': [{
            'PATH': ['favForm[0]', 'FavType'],
            'ID': 'cExpType',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavReason'],
            'ID': 'cExpReason',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavAmount'],
            'ID': 'cExpAmount',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavMilesClaim'],
            'ID': 'cExpClaimMiles',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavMilesRate'],
            'ID': 'cExpCalcMiles',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavFrom'],
            'ID': 'cExpFrom',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavTo'],
            'ID': 'cExpTo',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavPurpose'],
            'ID': 'cExpPurpose',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavNoNights'],
            'ID': 'cExpNoNights',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavVisit'],
            'ID': 'cExpVisit',
            'ATTR': 'value'
        }, {
            'PATH': ['favForm[0]', 'FavVehicle'],
            'ID': 'cExpVehicle',
            'ATTR': 'value'
        }],
        'requestMapping': []
    });

    datasources.push(FavJSONread);

    /*
     * Events and handlers
     */

    // Before Show
    OACameraExpense_beforeshow = function() {
        Appery.CurrentScreen = "OACameraExpense";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_6EAD_onLoad = OACameraExpense_onLoad = function() {
        screen_6EAD_elementsExtraJS();
        Tiggzi('mobilecontainer1').css('background-image', 'url("' + Tiggzi.getImagePath('bgd_1024x1024.jpg') + '")');
        Tiggzi('mobilecontainer1').css('background-size', 'cover');
        Tiggzi('button_delete').css('background', 'transparent');
        Tiggzi('button_delete').css('background-image', 'url("' + Tiggzi.getImagePath('trash_can32.png') + '")');
        Tiggzi('button_delete').css('background-repeat', 'no-repeat !important');
        Tiggzi('button_delete').css('background-size', 'cover');
        Tiggzi('button_copy').css('background', 'transparent');
        Tiggzi('button_copy').css('background-image', 'url("' + Tiggzi.getImagePath('copy.png') + '")');
        Tiggzi('button_copy').css('background-repeat', 'no-repeat !important');
        Tiggzi('button_copy').css('background-size', 'cover');
        Tiggzi('button_fav').css('background', 'transparent');
        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
        Tiggzi('button_fav').css('background-repeat', 'no-repeat !important');
        Tiggzi('button_fav').css('background-size', 'cover');
        Tiggzi('button_camera').css('background', 'transparent');
        Tiggzi('button_camera').css('background-image', 'url("' + Tiggzi.getImagePath('camera1.png') + '")');
        Tiggzi('button_camera').css('background-repeat', 'no-repeat !important');
        localStorage.setItem("FavExpense", "no");
        var myTable = Tiggzi("mainTable").get(0);
        myFirstRow = myTable.rows[24];
        myDummyRow = myTable.rows[25];
        myExpGrpRow = myTable.rows[0];
        myExpTypeRow = myTable.rows[1];
        myExpDateRow = myTable.rows[2];
        myExpReasonRow = myTable.rows[3];
        myExpAmountRow = myTable.rows[4];
        myExpChargeRow = myTable.rows[5];
        myExpPurposeRow = myTable.rows[6];
        myExpOOPRow = myTable.rows[7];
        myExpPayeeRow = myTable.rows[8];
        myExpNoPeopleRow = myTable.rows[9];
        myExpNoNightRow = myTable.rows[10];
        myEveMealRow = myTable.rows[11];
        myExpBreakRow = myTable.rows[12];
        myExpLunchRow = myTable.rows[13];
        myExpVisitRow = myTable.rows[14];
        myExpFromRow = myTable.rows[15];
        myExpToRow = myTable.rows[16];
        myExpRoundRow = myTable.rows[17];
        myExpMapRow = myTable.rows[18];
        myExpCalcMilesRow = myTable.rows[19];
        MyExpClaimMilesRow = myTable.rows[20];
        MyExpVehicleRow = myTable.rows[21];
        MyExpYTDMilesRow = myTable.rows[22];
        MyExpPeopleRow = myTable.rows[23];

/*
var selectedValue = localStorage.getItem("sessionGroup");
var data = localStorage.getItem("ResultFields");
var FieldList = [];  
var fldArray = new Array;
var parsedFields = JSON.parse(data);
var JSONFields = JSON.stringify(parsedFields.eFields);
var parsed = JSON.parse(JSONFields);
for (var i = 0; i < parsed.length; ++i)
      
  if (selectedValue  == parsed[i].cGroup)
    {
      var item = 
          { "Field": parsed[i].cFieldName,
            "Label": parsed[i].cFieldLabel,
            "DataType": parsed[i].cFieldDataType,
            "Mandatory": parsed[i].cFieldMandatory,
            "Hidden": parsed[i].cFieldHidden  };
      FieldList.push(item);
      fldArray[fldArray.length] = new fldItem(parsed[i].cFieldName,parsed[i].cFieldLabel,parsed[i].cFieldDataType,parsed[i].cFieldMandatory,parsed[i].cFieldHidden); 
      console.log('Found Field data pushing to JSONTypes storage.');
  	};
 alert(fldArray.length);

 

//myReady();
//  document.getElementById("mobilecontainer1").style.display = "none";
var myTable = Tiggzi("mainTable").get(0);
var innerRows = myTable.getElementsByTagName("tr");
 
var myFirstRow = myTable.rows[14];
var myDummyRow  = myTable.rows[15];
var myExpGrpRow = myTable.rows[0];
var myExpTypeRow = myTable.rows[1];
var myExpDateRow = myTable.rows[2];
var myExpReasonRow = myTable.rows[3];
var myExpAmountRow = myTable.rows[4];
var myExpChargeRow = myTable.rows[5];
var myExpPurposeRow = myTable.rows[6];
var myExpOOPRow = myTable.rows[7];
var myExpPayeeRow = myTable.rows[8];
var myExpNoPeopleRow = myTable.rows[9];
var myExpNoNightRow = myTable.rows[10];
var myEveMealRow = myTable.rows[11];
var myExpBreakRow = myTable.rows[12];
var myExpLunchRow = myTable.rows[13];
var thisRow;
var tmpNode;
 
alert(fldArray.length);
 for (i=0;i<fldArray.length ;i++ )
  {
    cFldName = fldArray[i].fldName;
    alert("newpage");
    alert(cFldName);
  //  cRowName = cFldName  
    cLabelName = cFldName + "_Lab";
    cLabel = fldArray[i].fldLabel;

    // shuffle the fields into order
    if (cFldName == 'cExpGroup') {thisRow =  myExpGrpRow};
    if (cFldName == 'cExpType') {thisRow =  myExpTypeRow};
    if (cFldName == 'cExpDate') {thisRow =  myExpDateRow};
    if (cFldName == 'cExpReason') {thisRow =  myExpReasonRow};
    if (cFldName == 'cExpAmount') {thisRow =  myExpAmountRow};
    if (cFldName == 'cExpCharge') {thisRow =  myExpChargeRow};
    if (cFldName == 'cExpPurpose') {thisRow =  myExpPurposeRow};
    if (cFldName == 'cExpOOP') {thisRow =  myExpOOPRow};
    if (cFldName == 'cExpPayee') {thisRow =  myExpPayeeRow};
    if (cFldName == 'cExpNoPeople') {thisRow =  myExpNoPeopleRow};
    if (cFldName == 'cExpNoNights') {thisRow =  myExpNoNightRow};
    if (cFldName == 'cExpEveMeal') {thisRow =  myEveMealRow};
    if (cFldName == 'cExpBreak') {thisRow =  myExpBreakRow};
    if (cFldName == 'cExpLunch') {thisRow =  myExpLunchRow};
  //  alert(cRowName);
    //thisRow = document.getElementById(cRowName);
	//alert(cRowName);
    tmpNode = myTable.tBodies[0].replaceChild(thisRow, myFirstRow);
    myTable.tBodies[0].insertBefore(tmpNode, myDummyRow);
        // Hide & Show
    if (fldArray[i].fldHide=='H')
    {
      thisRow.style.display = "none";
    }
    else
    {
      thisRow.style.display = "";
    }

    // Set Labels
   // Tiggzi(cLabelName).get(0)
    Tiggzi(cLabelName).get(0).innerHTML = cLabel + ':';
    
        // Mandatory & Disabled
    if (fldArray[i].fldMode=='M')
    {
       Tiggzi(cLabelName).get(0).innerHTML += '<span style="color:red">*</span>';
   
       Appery(cFldName).parent().css('border','2px solid #ff0000');
     // Tiggzi(cFldName).css('border','1px red solid ');
   
    }
    else if (fldArray[i].fldMode=='D')
    {
      Tiggzi(cFldName).get(0).readOnly = true;
      var fldMobileAmount = Tiggr(cFldName);
      fldMobileAmount.addClass('ui-disabled'); 
      Appery(cFldName).parent().css('border','1px solid #CCCCCC');
      //Tiggzi(cFldName).get(0).style.backgroundColor = "#EEEEEE";
    }
    
  }
*/
        ;

        // TODO fire device events only if necessary (with JS logic)
        OACameraExpense_deviceEvents();
        OACameraExpense_windowEvents();
        screen_6EAD_elementsEvents();
    }

    // screen window events
    screen_6EAD_windowEvents = OACameraExpense_windowEvents = function() {
        $('#OACameraExpense').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });
        $('#OACameraExpense').bind({
            pageshow: function() {
                setText('OACameraExpense_cExpGroup', localStorage.getItem('sessionGroup'));
                var selectedValue = localStorage.getItem("sessionGroup");
                var data = localStorage.getItem("ResultTypes");
                var TypeList = [];
                var dropDown = $('[name=cExpType]');
                dropDown.html('');
                var parsedTypes = JSON.parse(data);
                var JSONTypes = JSON.stringify(parsedTypes.eTypes);
                var parsed = JSON.parse(JSONTypes);
                var first = true;
                for (var i = 0; i < parsed.length; ++i)

                if (selectedValue == parsed[i].cGroup) {
                    var item = {
                        "Type": parsed[i].cType
                    };
                    TypeList.push(item);
                    if (first == true) {
                        localStorage.setItem("firstType", parsed[i].cType)
                        first = false;
                    };
                    dropDown.append('<option value="' + parsed[i].cType + '">​' + parsed[i].cType + '</option>');

                    console.log('Found data pushing to JSONTypes storage.');
                };

                Appery('cExpType').selectmenu('refresh', true);;
                Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
                Tiggzi('button_fav').css('background-repeat', 'no-repeat');
                Tiggzi('button_fav').css('background-size', 'cover');

                localStorage.setItem("FavExpense", "no");
                ebisExecuteServices();
                // paint screen
                // from grid you can select more - pick out selected option (if picked) and try things.....
                if (localStorage.getItem("lv_tagId") !== "") {
                    Appery('mobileDoneReceipt').removeClass('ui-disabled');
                    Appery('mobileDoneReceipt').addClass('buttonOK');
                    if (localStorage.getItem("isCopy") == "true") {
                        localStorage.setItem("isCopy", "false");
                        localStorage.setItem("lv_tagId", "");
                        $('h1[dsid="mobileheader2"]').text("Copy of Receipt");
                    } else {
                        $('h1[dsid="mobileheader2"]').text("Receipt");
                        // its an existing claim, not a copy, but could be some photo option selected from grid -> more.
                        if (localStorage.getItem("morePhoto") == "Camera") {
                            localStorage.setItem('PhotoType', 'Camera');
                            ebisExecuteCamera();
                        }
                        if (localStorage.getItem("morePhoto") == "Library") {
                            localStorage.setItem('PhotoType', 'Photolibrary');
                            ebisExecuteCamera();
                        }
                        if (localStorage.getItem("morePhoto") == "Remove") {
                            localStorage.setItem("morePhoto", "");
                            var path = Tiggzi.getImagePath('UIButtonBarCamera4.jpg');
                            $('img[dsid="mobileImage"]').attr('src', path);
                        }
                    }
                } else {
                    $('h1[dsid="mobileheader2"]').text("Receipt");
                    Appery('mobileDoneReceipt').removeClass('buttonOK');
                    Appery('mobileDoneReceipt').addClass('ui-disabled')
                }

                layoutPage();
                $(function() {
                    var tabindex = 1;
                    $('input,select,button,.ui-slider-handle').each(function() {
                        if (this.type != "hidden") {
                            var $input = $(this);
                            $input.attr("tabindex", tabindex);
                            tabindex++;
                        }
                    });
                });
                $(".UITest").css('display', 'block!important');
                $(".UITest").show();;
            },
        });

    }

    // device events
    OACameraExpense_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_6EAD_elementsExtraJS = OACameraExpense_elementsExtraJS = function() {
        // screen (OACameraExpense) extra code

        /* cExpType */

        $("#OACameraExpense_cExpType").parent().find("a.ui-btn").attr("tabindex", "2");

        /* cExpCharge */

        $("#OACameraExpense_cExpCharge").parent().find("a.ui-slider-handle").attr("tabindex", "6");
        $("#OACameraExpense_cExpCharge").val("on").slider('refresh');

        /* cExpEveMeal */

        $("#OACameraExpense_cExpEveMeal").parent().find("a.ui-slider-handle").attr("tabindex", "12");
        $("#OACameraExpense_cExpEveMeal").val("on").slider('refresh');

        /* cExpBreak */

        $("#OACameraExpense_cExpBreak").parent().find("a.ui-slider-handle").attr("tabindex", "13");
        $("#OACameraExpense_cExpBreak").val("on").slider('refresh');

        /* cExpLunch */

        $("#OACameraExpense_cExpLunch").parent().find("a.ui-slider-handle").attr("tabindex", "14");
        $("#OACameraExpense_cExpLunch").val("on").slider('refresh');

        /* cExpRound */

        $("#OACameraExpense_cExpRound").parent().find("a.ui-slider-handle").attr("tabindex", "18");
        $("#OACameraExpense_cExpRound").val("on").slider('refresh');

    }

    // screen elements handler
    screen_6EAD_elementsEvents = OACameraExpense_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

        $('#OACameraExpense_mobileheader2 [name="mobileDoneReceipt"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('lv_mobileImage', 'OACameraExpense_mobileImage', 'src', '', this);
                    ReceiptFormDone();
                    window.location = '#home';

                }
            },
        });

        $('#OACameraExpense_mobilecontainer1 [name="cExpAmount"]').die().live({
            change: function() {
                //Tiggzi('cExpAmount').val(formatMoney(Tiggzi("cExpAmount").val()));
                var num = Tiggzi('cExpAmount').val();

                $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                if ((num > 25.00) && (localStorage.getItem('sessionGroup') == "Subsistence")) {
                    var outsdo = Tiggzi('cExpAmount').parent(); //get Div of Jobs Pic
                    $('#outofpolicy').remove(); //Remove any existing Jobs counter style first
                    var StyleTask = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '10px 10px 1px #000',
                        'font-weight': 'bold',
                        'font-size': '80%',
                        'margin-left': '50px',
                        'margin-top': '-28px'
                    };
                    var StyleJob = {
                        'text-align': 'center',
                        'position': 'absolute',
                        'color': 'red',
                        'text-shadow': '8px 8px 1px #000',
                        'font-weight': 'bold',
                        'margin-left': '65px',
                        'margin-top': '-48px'
                    };
                    $('<p id="outofpolicy">').appendTo(outsdo).text("Out of Policy").css(StyleTask);
                }

                ;
            },
        });

        $('#OACameraExpense_mobilecontainer1 [name="cExpMap"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    setVar_('myStartPostcode', 'OACameraExpense_cExpFrom', 'text', '', this);
                    setVar_('myEndPostcode', 'OACameraExpense_cExpTo', 'text', '', this);
                    getMiles();

                }
            },
        });
        $('#OACameraExpense_mobilecontainer1 [name="mobilebutton_190"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    alert("Show map TBC");

                }
            },
        });

        $('#OACameraExpense_mobilecontainer1 [name="mobileImage"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    try {
                        mobilecamera1.execute({})
                    } catch (ex) {
                        console.log(ex.name + '  ' + ex.message);
                        hideSpinner();
                    };

                }
            },
        });

        $('#OACameraExpense_mobilefooter1 [name="button_delete"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    navigator.notification.confirm("", onConfirmDelete, "Delete Claim Details?", "Delete Claim Line,Remove Photo,CANCEL");

                    function onConfirmDelete(buttonIndex) {
                        if (buttonIndex === 1) {
                            var theid = localStorage.getItem("lv_tagId");
                            var expenseModify = [];

                            if (theid !== "") {
                                var expenseForm = localStorage.getItem("expenseRaw");
                                if (!expenseForm) {
                                    expenseForm = [];
                                } else {
                                    expenseForm = JSON.parse(expenseForm);
                                }
                                // expenseForm = JSON.parse(expenseForm);
                                expenseForm.splice(localStorage.getItem("ModifyRow"), 1);
                                var Counter = isNaN(parseInt(localStorage.getItem('SendCounter'))) ? 0 : parseInt(localStorage.getItem('SendCounter'));
                                Counter--;
                                localStorage.setItem('SendCounter', Counter);
                                myJSON = JSON.stringify({
                                    expenseForm: expenseForm
                                });
                                localStorage.setItem("expenseForm", myJSON);
                                localStorage.setItem("expenseRaw", JSON.stringify(expenseForm));
                            }
                            Tiggr.navigateTo('home', {
                                transition: 'fade',
                                reverse: false
                            });
                        }
                        if (buttonIndex === 2) {
                            var path = Tiggzi.getImagePath('UIButtonBarCamera4.jpg');
                            $('img[dsid="mobileImage"]').attr('src', path);
                        }
                        if (buttonIndex === 2) {
                            // do nothing - maybe confirm message nothing happened, but this really isnt ios style.
                        }
                    }

                    ;

                }
            },
        });
        $('#OACameraExpense_mobilefooter1 [name="button_fav"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    if (localStorage.getItem("FavExpense") == 'no') {
                        localStorage.setItem("FavExpense", "yes");
                        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('favblue.png') + '")');
                        Tiggzi('button_fav').css('background-repeat', 'no-repeat');
                    } else {
                        Tiggzi('button_fav').css('background-image', 'url("' + Tiggzi.getImagePath('star_add.png') + '")');
                        localStorage.setItem("FavExpense", "no");
                    };

                }
            },
        });
        $('#OACameraExpense_mobilefooter1 [name="button_copy"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    navigator.notification.confirm("", onConfirmCopy, "Copy this claim line?", "Copy Claim,CANCEL");

                    function onConfirmCopy(buttonIndex) {
                        if (buttonIndex === 1) {
                            var theid = localStorage.getItem("lv_tagId");
                            if (theid == "") {
                                alert("Please save this one first!");
                            } else {
                                $('h1[dsid="mobileheader2"]').text("Copy of Receipt");
                                localStorage.setItem("lv_tagId", "");
                            }
                        }
                        if (buttonIndex === 2) {
                            // cant think of anything to go here on cancel? 
                        }

                    };

                }
            },
        });
        $('#OACameraExpense_mobilefooter1 [name="button_camera"]').die().live({
            click: function() {
                if (!$(this).attr('disabled')) {
                    navigator.notification.confirm("Take Photo or Choose from Library?", onConfirmPhoto, "Photo of Receipt", "Take Photo,Use Library, CANCEL");

                    function onConfirmPhoto(buttonIndex) {
                        if (buttonIndex === 1) {
                            localStorage.setItem('PhotoType', 'Camera');
                            ebisExecuteCamera();
                        }
                        if (buttonIndex === 2) {
                            localStorage.setItem('PhotoType', 'Photolibrary');
                            ebisExecuteCamera();
                        }

                    };

                }
            },
        });

    }

    $("#OACameraExpense").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        OACameraExpense_beforeshow();
    });

    if (runBeforeShow) {
        OACameraExpense_beforeshow();
    } else {
        OACameraExpense_onLoad();
    }

}

$("#OACameraExpense").die("pageinit").live("pageinit", function(event, ui) {
    Appery.processSelectMenu($(this));
    OACameraExpense_js();
});

abs_js = function(runBeforeShow) { /* Object & array with components "name-to-id" mapping */
    var n2id_buf = {
        'mobilegrid_4': 'abs_mobilegrid_4',
        'mobilegridcell_5': 'abs_mobilegridcell_5',
        'mobilegridcell_9': 'abs_mobilegridcell_9'
    };

    if ("n2id" in window && window.n2id !== undefined) {
        $.extend(n2id, n2id_buf);
    } else {
        window.n2id = n2id_buf;
    }

    if (navigator.userAgent.indexOf("IEMobile") != -1) {
        //Fixing issue https://github.com/jquery/jquery-mobile/issues/5424 on Windows Phone
        $("div[data-role=footer]").css("bottom", "-36px");
    }

    Appery.CurrentScreen = 'abs';

    /*
     * Nonvisual components
     */
    var datasources = [];

    /*
     * Events and handlers
     */

    // Before Show
    abs_beforeshow = function() {
        Appery.CurrentScreen = "abs";
        for (var idx = 0; idx < datasources.length; idx++) {
            datasources[idx].__setupDisplay();
        }
    }

    // On Load
    screen_5EED_onLoad = abs_onLoad = function() {
        screen_5EED_elementsExtraJS();

        // TODO fire device events only if necessary (with JS logic)
        abs_deviceEvents();
        abs_windowEvents();
        screen_5EED_elementsEvents();
    }

    // screen window events
    screen_5EED_windowEvents = abs_windowEvents = function() {
        $('#abs').bind('pageshow orientationchange', function() {
            adjustContentHeightWithPadding();
        });

    }

    // device events
    abs_deviceEvents = function() {

        document.addEventListener("deviceready", function() {

        });
    }

    // screen elements extra js
    screen_5EED_elementsExtraJS = abs_elementsExtraJS = function() {
        // screen (abs) extra code

    }

    // screen elements handler
    screen_5EED_elementsEvents = abs_elementsEvents = function() {

        $("a :input,a a,a fieldset label").live({
            click: function(event) {
                event.stopPropagation();
            }
        });

    }

    $("#abs").die("pagebeforeshow").live("pagebeforeshow", function(event, ui) {
        abs_beforeshow();
    });

    if (runBeforeShow) {
        abs_beforeshow();
    } else {
        abs_onLoad();
    }

}

$("#abs").die("dialoginit").live("dialoginit", function(event, ui) {
    Appery.processSelectMenu($(this));
    abs_js();
});

$("#abs").die("dialogcreate").live("dialogcreate", function(event, ui) {
    //Most components initializations are done on "pagecreate" event. This event must be triggered for dialogs too.
    $(this).trigger("pagecreate");
});